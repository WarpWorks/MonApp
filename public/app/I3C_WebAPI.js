// ***************************************************************************************************** //
// MonApp Web API for Domain: I3C
// Generated by HeadStart::MonApp, version: v0.1
// Generated on: 2017-02-17 20:39:15
// ***************************************************************************************************** //

//
// Global helpers
//

$active = { initCalls: [], onSave: [], initialized:false };
whenReady = function (fct) {
    if ($active.initialized) fct.call();
    else $active.initCalls.push(fct);
}
onSave = function (fct) {
    $active.onSave.push(fct);
}
saveHandler = function () {
    $active.onSave.forEach(function (fct) {
        fct.call();
    });
    getI3CAdmin().save("I3C");
}

$(window).unload(function() {
    saveHandler("I3C");
});

// Handler for Nav elements from _appLayout.hbs
$(document).ready(function () {
    $("#NavButtonSaveA").on("click", saveHandler);
    //TBD: $("#NavButtonDeleteA").on("click", deleteHandler);
    //TBD: $("#NavButtonCancelA").on("click", cancelHandler);
});

//
// I3CAdmin Interface
//

// TBD: use global variable with shorter name...

var _I3CAdmin = null;

getI3CAdmin = function  () {
    if (!_I3CAdmin)
        _I3CAdmin = new I3CAdmin ();
    return _I3CAdmin;
}

function I3CAdmin() {
    this._rootInstance = null;
    this._entityCache = {};
    this._newEntities = [];
}

I3CAdmin.prototype.getRootInstance = function (domain, handleResult) {
    if (this._rootInstance) {
        handleResult(this._rootInstance);
        return;
    }
    console.log("Getting root entity for "+domain);
    var reqData = {
        commandList: [
            {
                command: "GetRootInstance",
                domain: domain,
                targetType: domain
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            if (!result.resultList || result.resultList.length!=1) {
                alert("Could not find RootInstance - potential Server error");
                return;
            }
            if (result.resultList[0].error) {
                alert(result.resultList[0].status);
                return;
            }
            var rootInstanceFromServer = result.resultList[0].rootInstance;
            console.log("RootInstanceID: " + rootInstanceFromServer._id);
            var newRootInstance = new I3C ("I3C", null, rootInstanceFromServer._id, false);
            getI3CAdmin()._rootInstance = newRootInstance;
            handleResult (newRootInstance);
        }
        else {
            alert(result.err);
        }
    });
}

I3CAdmin.prototype.getEntityByID = function (domain, targetType, entityID, handleResult) {
    var target = this._entityCache[entityID];
    if (target) {
        handleResult(target);
        return;
    }
    console.log("Getting entity by ID from domain "+domain);
    var reqData = {
        commandList: [
            {
                command: "FindByID",
                domain: domain,
                targetType: targetType,
                targetID: entityID
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            if (!result.resultList || result.resultList.length!=1) {
                alert("Could not find entity!");
                handleResult (null);
                return;
            }
            if (result.resultList[0].error) {
                alert(result.resultList[0].status);
                handleResult (null);
                return;
            }
            var entityFromServer = result.resultList[0].result;
            var newEntity = getI3CAdmin().findOrAddToEntityCache (entityID, entityFromServer.type);
            newEntity.updatePropertiesWithQueryResults(entityFromServer);
            handleResult (newEntity);
        }
        else {
            alert(result.err);
        }
    });
}

I3CAdmin.prototype.getEntitiesByType = function (domain, targetType, handleResult) {
    console.log("Getting entities by Type from domain "+domain);
    var reqData = {
        commandList: [
            {
                command: "FindByType",
                domain: domain,
                targetType: targetType
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            if (!result.resultList) {
                alert("Could not find entities!");
                handleResult (null);
                return;
            }
            if (result.resultList[0].error) {
                alert(result.resultList[0].status);
                handleResult (null);
                return;
            }
            var resList = [];
            for (i in result.resultList[0].result) {
                var res = result.resultList[0].result[i];
                var newEntity = getI3CAdmin().findOrAddToEntityCache (res._id, res.type);
                newEntity.updatePropertiesWithQueryResults(res);
                resList.push(newEntity);
            }
            handleResult (resList);
        }
        else {
            alert(result.err);
        }
    });
}


I3CAdmin.prototype.addNew_Content = function (parentID, relnID, relnName) {
    var new_Content = new Content ("Content", null, null, false);
    new_Content.parentID = parentID;
    new_Content.parentRelnName = relnName;
    new_Content.parentRelnID = relnID;
    new_Content.isNew = true;
    return new_Content;
}

I3CAdmin.prototype.addNew_ApplicationArea = function (parentID, relnID, relnName) {
    var new_ApplicationArea = new ApplicationArea ("ApplicationArea", null, null, false);
    new_ApplicationArea.parentID = parentID;
    new_ApplicationArea.parentRelnName = relnName;
    new_ApplicationArea.parentRelnID = relnID;
    new_ApplicationArea.isNew = true;
    return new_ApplicationArea;
}

I3CAdmin.prototype.addNew_HotSpot = function (parentID, relnID, relnName) {
    var new_HotSpot = new HotSpot ("HotSpot", null, null, false);
    new_HotSpot.parentID = parentID;
    new_HotSpot.parentRelnName = relnName;
    new_HotSpot.parentRelnID = relnID;
    new_HotSpot.isNew = true;
    return new_HotSpot;
}

I3CAdmin.prototype.addNew_IndustrySector = function (parentID, relnID, relnName) {
    var new_IndustrySector = new IndustrySector ("IndustrySector", null, null, false);
    new_IndustrySector.parentID = parentID;
    new_IndustrySector.parentRelnName = relnName;
    new_IndustrySector.parentRelnID = relnID;
    new_IndustrySector.isNew = true;
    return new_IndustrySector;
}

I3CAdmin.prototype.addNew_IndustryVertical = function (parentID, relnID, relnName) {
    var new_IndustryVertical = new IndustryVertical ("IndustryVertical", null, null, false);
    new_IndustryVertical.parentID = parentID;
    new_IndustryVertical.parentRelnName = relnName;
    new_IndustryVertical.parentRelnID = relnID;
    new_IndustryVertical.isNew = true;
    return new_IndustryVertical;
}

I3CAdmin.prototype.addNew_Standard = function (parentID, relnID, relnName) {
    var new_Standard = new Standard ("Standard", null, null, false);
    new_Standard.parentID = parentID;
    new_Standard.parentRelnName = relnName;
    new_Standard.parentRelnID = relnID;
    new_Standard.isNew = true;
    return new_Standard;
}

I3CAdmin.prototype.addNew_StandardsOrganization = function (parentID, relnID, relnName) {
    var new_StandardsOrganization = new StandardsOrganization ("StandardsOrganization", null, null, false);
    new_StandardsOrganization.parentID = parentID;
    new_StandardsOrganization.parentRelnName = relnName;
    new_StandardsOrganization.parentRelnID = relnID;
    new_StandardsOrganization.isNew = true;
    return new_StandardsOrganization;
}

I3CAdmin.prototype.addNew_Technology = function (parentID, relnID, relnName) {
    var new_Technology = new Technology ("Technology", null, null, false);
    new_Technology.parentID = parentID;
    new_Technology.parentRelnName = relnName;
    new_Technology.parentRelnID = relnID;
    new_Technology.isNew = true;
    return new_Technology;
}

I3CAdmin.prototype.addNew_TechnologyArea = function (parentID, relnID, relnName) {
    var new_TechnologyArea = new TechnologyArea ("TechnologyArea", null, null, false);
    new_TechnologyArea.parentID = parentID;
    new_TechnologyArea.parentRelnName = relnName;
    new_TechnologyArea.parentRelnID = relnID;
    new_TechnologyArea.isNew = true;
    return new_TechnologyArea;
}

I3CAdmin.prototype.addNew_UseCase = function (parentID, relnID, relnName) {
    var new_UseCase = new UseCase ("UseCase", null, null, false);
    new_UseCase.parentID = parentID;
    new_UseCase.parentRelnName = relnName;
    new_UseCase.parentRelnID = relnID;
    new_UseCase.isNew = true;
    return new_UseCase;
}

I3CAdmin.prototype.addNew_I3C = function (parentID, relnID, relnName) {
    var new_I3C = new I3C ("I3C", null, null, false);
    new_I3C.parentID = parentID;
    new_I3C.parentRelnName = relnName;
    new_I3C.parentRelnID = relnID;
    new_I3C.isNew = true;
    return new_I3C;
}



I3CAdmin.prototype.save = function (domain) {
    this.saveNewEntities(domain);
    this.saveChangedEntities(domain);
}

I3CAdmin.prototype.saveNewEntities = function (domain) {
    if (this._newEntities.length===0) return;

    var entitiesWithPropertiesOnly = [];
    for (i in this._newEntities) {
        entitiesWithPropertiesOnly.push(this._newEntities[i].propertiesOnly());
    }
    this._newEntities=[];

    var reqData = {
        commandList: [
            {
                command: "Create",
                domain: domain,
                targetType: entitiesWithPropertiesOnly[0].type, // TBD: DIRTY HACK - must be changed on the server side to work with multiple entities!
                entities: entitiesWithPropertiesOnly
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            console.log("Create: OK!");
        }
        else {
            alert(result.err);
        }
    });
}

I3CAdmin.prototype.saveChangedEntities = function (domain) {
    var changedEntities = this.getChangedEntities();
    if (!changedEntities || changedEntities.length===0) return;

    var entitiesWithPropertiesOnly = [];
    for (i in changedEntities) {
        entitiesWithPropertiesOnly.push(changedEntities[i].propertiesOnly());
        changedEntities[i].changed = false;
    }

    var reqData = {
        commandList: [
            {
                command: "Update",
                domain: domain,
                targetType: entitiesWithPropertiesOnly[0].type, // TBD: DIRTY HACK - must be changed on the server side to work with multiple entities!
                entities: entitiesWithPropertiesOnly
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            console.log("Save: OK!");
        }
        else {
            alert(result.err);
        }
    });
}

I3CAdmin.prototype.processCRUDcommands = function (commandList, handleResult) {
    //Create JSON Data
    var reqData = JSON.stringify(commandList, null, 2)

    // Post to server
    $.ajax({
        url: '/appApi/CRUD',
        type: 'POST',
        data: reqData,
        contentType: 'application/json; charset=utf-8',
        dataType: "json",
        success: function (result) {
            if (result.success) {
                handleResult (result);
            }
            else {
                console.log("Failed to post CRUD commands: " + result.error);
            }
        },
        error: function () {
            console.log("Error while posting CRUD commands!");
        }
    });
}

I3CAdmin.prototype.getChangedEntities = function () {
    var result = [];
    for (i in this._entityCache) {
        if (this._entityCache[i].changed) result.push(this._entityCache[i]);
    }
    return result;
}

I3CAdmin.prototype.findOrAddToEntityCache = function (entityID, entityType, queryResult) {
    var target = this._entityCache[entityID];
    if (target) return target;
    var newEntity=null;
    switch (entityType) {
        case "Content": newEntity = new Content ("Content", null, entityID, true); break;
        case "ApplicationArea": newEntity = new ApplicationArea ("ApplicationArea", null, entityID, true); break;
        case "HotSpot": newEntity = new HotSpot ("HotSpot", null, entityID, true); break;
        case "IndustrySector": newEntity = new IndustrySector ("IndustrySector", null, entityID, true); break;
        case "IndustryVertical": newEntity = new IndustryVertical ("IndustryVertical", null, entityID, true); break;
        case "Standard": newEntity = new Standard ("Standard", null, entityID, true); break;
        case "StandardsOrganization": newEntity = new StandardsOrganization ("StandardsOrganization", null, entityID, true); break;
        case "Technology": newEntity = new Technology ("Technology", null, entityID, true); break;
        case "TechnologyArea": newEntity = new TechnologyArea ("TechnologyArea", null, entityID, true); break;
        case "UseCase": newEntity = new UseCase ("UseCase", null, entityID, true); break;
        case "I3C": newEntity = new I3C ("I3C", null, entityID, true); break;
        default: throw "Unknown Entity Type: "+entityType;
    }
    if (queryResult) newEntity.updatePropertiesWithQueryResults(queryResult);
    return newEntity;
}

I3CAdmin.prototype.updateEntityCacheWithQueryResults = function (queryResults) {
    if (!queryResults || queryResults.error) throw "Error updating entity cache!"
    queryResults.resultList.forEach (function (queryResult) {
        switch (queryResult.queryType) {
            case "RootInstance":
                getI3CAdmin()._rootInstance = new I3C ("I3C", null, null);
                break;
            case "AggregationQuery":
                var parent = getI3CAdmin().findOrAddToEntityCache(queryResult.parentID, queryResult.parentType);
                parent.updateRelationshipWithQueryResults (queryResult);
                break;
            case "FindAssocTargetOptions":
                var source = getI3CAdmin().findOrAddToEntityCache(queryResult.sourceID, queryResult.sourceType);
                source.updateRelationshipWithQueryResults (queryResult);
                break;
            default:
                console.log("Unknown query type: "+queryResult.queryType);
        }
    });
}

//
// Class "Relationship"
//

function Relationship(id, name, parent) {
    this.name = name;
    this.id = id;
    this.parent = parent;
    this.currentPage = 0;
    this.entitiesPerPage = 4;
    this.maxNumberOfPages = 5;
    this.filter = null;

    this.queryResults = [];
    this.queryResultsCount = -1;

    this.assocTargets = [];
}

Relationship.prototype.setFilter = function (f) {
    this.filter = f;
    this.currentPage=0;
}

Relationship.prototype.removeFromAssocTargets = function (id) {
    var newSelections = [];
    for (i in this.assocTargets) {
        if (this.assocTargets[i].id !== id)
            newSelections.push(this.assocTargets[i]);
    }
    this.assocTargets = newSelections;
}

//
// Class "Base"
//

function Base(type, parent, id, isEmptyShell) {
    this.type = type;
    this.parent = parent;
    this.id = id;
    this.isEmptyShell = isEmptyShell;
    this.isNew = false;
    this.properties_NameOnly = false;
    this.properties_Valid = false;
    this.changed = false;

    if (id)
        getI3CAdmin()._entityCache[id] = this;
    else
        getI3CAdmin()._newEntities.push(this);

    // console.log("New "+type+": ["+id+"]");
}

Base.prototype.compareToMyID = function (id) {
  return ""+this.id === ""+id;
}

// Misc tools

function getShortLabel (str) {
    str += "";
    return str.length<30 ? str : str.slice(0, 49)+"...";
}


//
// Class "Content"
//

// Constructor
function Content (type, parent, id, isEmptyShell) {
    // Initialize base class
    
    Base.call(this, type, parent, id, isEmptyShell);


    // Properties:
    this.Name='text';
    this.Description='text';


}

// Inheritance
Content.prototype = Object.create(Base.prototype);
Content.prototype.constructor = Content;


//
// Methods
//

Content.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Name;
    return res;
}

Content.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;
    this._Name = qr.Name;
    this._Description = qr.Description;

}


Content.prototype.get_Name = function () { return this._Name };
Content.prototype.set_Name = function (value) {
    if (this._Name===value) return;
    this._Name=value; this.changed=true; }; 
Content.prototype.get_Description = function () { return this._Description };
Content.prototype.set_Description = function (value) {
    if (this._Description===value) return;
    this._Description=value; this.changed=true; }; 

Content.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    propertiesOnly._id = this.id;
    propertiesOnly.type = this.type;
    propertiesOnly.parentID = this.parentID;
    propertiesOnly.parentRelnName = this.parentRelnName;
    propertiesOnly.relnID = this.relnID;

    propertiesOnly.Name = this.get_Name();
    propertiesOnly.Description = this.get_Description();

    return propertiesOnly;
}









//
// Class "ApplicationArea"
//

// Constructor
function ApplicationArea (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);




    // Relationships:
    this.UseCases = new Relationship(10, "UseCases", this);
}

// Inheritance
ApplicationArea.prototype = Object.create(Content.prototype);
ApplicationArea.prototype.constructor = ApplicationArea;


//
// Methods
//

ApplicationArea.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Name;
    return res;
}

ApplicationArea.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;

}



ApplicationArea.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    return propertiesOnly;
}


ApplicationArea.prototype.updateRelationshipWithQueryResults = function (qr) {
    relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
    switch(relnName) {
        
        case "UseCases":
            this.UseCases.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.UseCases.queryResults.push(target);
            }
        break;
        
        default: throw "Invalid relationship name: "+relnName;
    }
}



ApplicationArea.prototype.query_UseCases = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "UseCases",
        parentRelnID: "10",
        targetType: "UseCase",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.UseCases.currentPage,
        entitiesPerPage: this.UseCases.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.UseCases.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.UseCases);
    });
}

ApplicationArea.prototype.getPotentialTargets4UseCases = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "UseCase",
        sourceRelnName: "UseCases",
        sourceRelnID: "10",
        currentPage: this.UseCases.currentPage,
        entitiesPerPage:this.UseCases.entitiesPerPage,
        filter:this.UseCases.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.UseCases.queryResults = [];
        me.UseCases.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.UseCases);
    });
}


// Manage Aggregations:
ApplicationArea.prototype.get_UseCases = function () {
    return this.UseCases.queryResults;
}




//
// Class "HotSpot"
//

// Constructor
function HotSpot (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);




    // Relationships:
    this.IndustryVerticals = new Relationship(14, "IndustryVerticals", this);
    this.UseCases = new Relationship(15, "UseCases", this);
    this.Technologies = new Relationship(16, "Technologies", this);
    this.Standards = new Relationship(17, "Standards", this);
}

// Inheritance
HotSpot.prototype = Object.create(Content.prototype);
HotSpot.prototype.constructor = HotSpot;


//
// Methods
//

HotSpot.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Name;
    return res;
}

HotSpot.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;

    this.IndustryVerticals.assocTargets = qr.IndustryVerticals ? qr.IndustryVerticals : [];
    this.UseCases.assocTargets = qr.UseCases ? qr.UseCases : [];
    this.Technologies.assocTargets = qr.Technologies ? qr.Technologies : [];
    this.Standards.assocTargets = qr.Standards ? qr.Standards : [];
}



HotSpot.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    propertiesOnly.IndustryVerticals = this.IndustryVerticals.assocTargets;
    propertiesOnly.UseCases = this.UseCases.assocTargets;
    propertiesOnly.Technologies = this.Technologies.assocTargets;
    propertiesOnly.Standards = this.Standards.assocTargets;
    return propertiesOnly;
}


HotSpot.prototype.updateRelationshipWithQueryResults = function (qr) {
    relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
    switch(relnName) {
        
        case "IndustryVerticals":
            this.IndustryVerticals.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.IndustryVerticals.queryResults.push(target);
            }
        break;
        
        case "UseCases":
            this.UseCases.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.UseCases.queryResults.push(target);
            }
        break;
        
        case "Technologies":
            this.Technologies.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.Technologies.queryResults.push(target);
            }
        break;
        
        case "Standards":
            this.Standards.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.Standards.queryResults.push(target);
            }
        break;
        
        default: throw "Invalid relationship name: "+relnName;
    }
}



HotSpot.prototype.query_IndustryVerticals = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AssociationQuery",
        parentRelnName: "IndustryVerticals",
        parentRelnID: "14",
        targetType: "IndustryVertical",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.IndustryVerticals.currentPage,
        entitiesPerPage: this.IndustryVerticals.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustryVerticals.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustryVerticals);
    });
}

HotSpot.prototype.getPotentialTargets4IndustryVerticals = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "IndustryVertical",
        sourceRelnName: "IndustryVerticals",
        sourceRelnID: "14",
        currentPage: this.IndustryVerticals.currentPage,
        entitiesPerPage:this.IndustryVerticals.entitiesPerPage,
        filter:this.IndustryVerticals.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustryVerticals.queryResults = [];
        me.IndustryVerticals.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustryVerticals);
    });
}

HotSpot.prototype.query_UseCases = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AssociationQuery",
        parentRelnName: "UseCases",
        parentRelnID: "15",
        targetType: "UseCase",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.UseCases.currentPage,
        entitiesPerPage: this.UseCases.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.UseCases.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.UseCases);
    });
}

HotSpot.prototype.getPotentialTargets4UseCases = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "UseCase",
        sourceRelnName: "UseCases",
        sourceRelnID: "15",
        currentPage: this.UseCases.currentPage,
        entitiesPerPage:this.UseCases.entitiesPerPage,
        filter:this.UseCases.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.UseCases.queryResults = [];
        me.UseCases.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.UseCases);
    });
}

HotSpot.prototype.query_Technologies = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AssociationQuery",
        parentRelnName: "Technologies",
        parentRelnID: "16",
        targetType: "Technology",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Technologies.currentPage,
        entitiesPerPage: this.Technologies.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.Technologies.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Technologies);
    });
}

HotSpot.prototype.getPotentialTargets4Technologies = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Technology",
        sourceRelnName: "Technologies",
        sourceRelnID: "16",
        currentPage: this.Technologies.currentPage,
        entitiesPerPage:this.Technologies.entitiesPerPage,
        filter:this.Technologies.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.Technologies.queryResults = [];
        me.Technologies.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Technologies);
    });
}

HotSpot.prototype.query_Standards = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AssociationQuery",
        parentRelnName: "Standards",
        parentRelnID: "17",
        targetType: "Standard",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Standards.currentPage,
        entitiesPerPage: this.Standards.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.Standards.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Standards);
    });
}

HotSpot.prototype.getPotentialTargets4Standards = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Standard",
        sourceRelnName: "Standards",
        sourceRelnID: "17",
        currentPage: this.Standards.currentPage,
        entitiesPerPage:this.Standards.entitiesPerPage,
        filter:this.Standards.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.Standards.queryResults = [];
        me.Standards.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Standards);
    });
}




// Manage Associations:
HotSpot.prototype.get_IndustryVerticals = function () {
     return this.IndustryVerticals.queryResults;
}

HotSpot.prototype.get_UseCases = function () {
     return this.UseCases.queryResults;
}

HotSpot.prototype.get_Technologies = function () {
     return this.Technologies.queryResults;
}

HotSpot.prototype.get_Standards = function () {
     return this.Standards.queryResults;
}


//
// Class "IndustrySector"
//

// Constructor
function IndustrySector (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);




    // Relationships:
    this.IndustryVerticals = new Relationship(7, "IndustryVerticals", this);
}

// Inheritance
IndustrySector.prototype = Object.create(Content.prototype);
IndustrySector.prototype.constructor = IndustrySector;


//
// Methods
//

IndustrySector.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Name;
    return res;
}

IndustrySector.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;

}



IndustrySector.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    return propertiesOnly;
}


IndustrySector.prototype.updateRelationshipWithQueryResults = function (qr) {
    relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
    switch(relnName) {
        
        case "IndustryVerticals":
            this.IndustryVerticals.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.IndustryVerticals.queryResults.push(target);
            }
        break;
        
        default: throw "Invalid relationship name: "+relnName;
    }
}



IndustrySector.prototype.query_IndustryVerticals = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "IndustryVerticals",
        parentRelnID: "7",
        targetType: "IndustryVertical",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.IndustryVerticals.currentPage,
        entitiesPerPage: this.IndustryVerticals.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustryVerticals.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustryVerticals);
    });
}

IndustrySector.prototype.getPotentialTargets4IndustryVerticals = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "IndustryVertical",
        sourceRelnName: "IndustryVerticals",
        sourceRelnID: "7",
        currentPage: this.IndustryVerticals.currentPage,
        entitiesPerPage:this.IndustryVerticals.entitiesPerPage,
        filter:this.IndustryVerticals.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustryVerticals.queryResults = [];
        me.IndustryVerticals.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustryVerticals);
    });
}


// Manage Aggregations:
IndustrySector.prototype.get_IndustryVerticals = function () {
    return this.IndustryVerticals.queryResults;
}




//
// Class "IndustryVertical"
//

// Constructor
function IndustryVertical (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);




}

// Inheritance
IndustryVertical.prototype = Object.create(Content.prototype);
IndustryVertical.prototype.constructor = IndustryVertical;


//
// Methods
//

IndustryVertical.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Name;
    return res;
}

IndustryVertical.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;

}



IndustryVertical.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    return propertiesOnly;
}









//
// Class "Standard"
//

// Constructor
function Standard (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);


    // Properties:
    this.Technologies='text';


}

// Inheritance
Standard.prototype = Object.create(Content.prototype);
Standard.prototype.constructor = Standard;


//
// Methods
//

Standard.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Technologies;
    return res;
}

Standard.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;
    this._Technologies = qr.Technologies;

}


Standard.prototype.get_Technologies = function () { return this._Technologies };
Standard.prototype.set_Technologies = function (value) {
    if (this._Technologies===value) return;
    this._Technologies=value; this.changed=true; }; 

Standard.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    propertiesOnly._id = this.id;
    propertiesOnly.type = this.type;
    propertiesOnly.parentID = this.parentID;
    propertiesOnly.parentRelnName = this.parentRelnName;
    propertiesOnly.relnID = this.relnID;

    propertiesOnly.Technologies = this.get_Technologies();

    return propertiesOnly;
}









//
// Class "StandardsOrganization"
//

// Constructor
function StandardsOrganization (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);



    // Enumerations:
    this.LiasonStatus="";

    // Relationships:
    this.Standards = new Relationship(24, "Standards", this);
}

// Inheritance
StandardsOrganization.prototype = Object.create(Content.prototype);
StandardsOrganization.prototype.constructor = StandardsOrganization;

// Definitions for Enumerations
StandardsOrganization.prototype.enumDef_LiasonStatus = ["None", "Considered", "WIP", "Confirmed"];

//
// Methods
//

StandardsOrganization.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Name;
    return res;
}

StandardsOrganization.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;

}



StandardsOrganization.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    return propertiesOnly;
}


StandardsOrganization.prototype.updateRelationshipWithQueryResults = function (qr) {
    relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
    switch(relnName) {
        
        case "Standards":
            this.Standards.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.Standards.queryResults.push(target);
            }
        break;
        
        default: throw "Invalid relationship name: "+relnName;
    }
}



StandardsOrganization.prototype.query_Standards = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "Standards",
        parentRelnID: "24",
        targetType: "Standard",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Standards.currentPage,
        entitiesPerPage: this.Standards.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.Standards.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Standards);
    });
}

StandardsOrganization.prototype.getPotentialTargets4Standards = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Standard",
        sourceRelnName: "Standards",
        sourceRelnID: "24",
        currentPage: this.Standards.currentPage,
        entitiesPerPage:this.Standards.entitiesPerPage,
        filter:this.Standards.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.Standards.queryResults = [];
        me.Standards.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Standards);
    });
}


// Manage Aggregations:
StandardsOrganization.prototype.get_Standards = function () {
    return this.Standards.queryResults;
}




//
// Class "Technology"
//

// Constructor
function Technology (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);




}

// Inheritance
Technology.prototype = Object.create(Content.prototype);
Technology.prototype.constructor = Technology;


//
// Methods
//

Technology.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Name;
    return res;
}

Technology.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;

}



Technology.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    return propertiesOnly;
}









//
// Class "TechnologyArea"
//

// Constructor
function TechnologyArea (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);




    // Relationships:
    this.Technologies = new Relationship(28, "Technologies", this);
}

// Inheritance
TechnologyArea.prototype = Object.create(Content.prototype);
TechnologyArea.prototype.constructor = TechnologyArea;


//
// Methods
//

TechnologyArea.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._Name;
    return res;
}

TechnologyArea.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;

}



TechnologyArea.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    return propertiesOnly;
}


TechnologyArea.prototype.updateRelationshipWithQueryResults = function (qr) {
    relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
    switch(relnName) {
        
        case "Technologies":
            this.Technologies.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.Technologies.queryResults.push(target);
            }
        break;
        
        default: throw "Invalid relationship name: "+relnName;
    }
}



TechnologyArea.prototype.query_Technologies = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "Technologies",
        parentRelnID: "28",
        targetType: "Technology",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Technologies.currentPage,
        entitiesPerPage: this.Technologies.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.Technologies.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Technologies);
    });
}

TechnologyArea.prototype.getPotentialTargets4Technologies = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Technology",
        sourceRelnName: "Technologies",
        sourceRelnID: "28",
        currentPage: this.Technologies.currentPage,
        entitiesPerPage:this.Technologies.entitiesPerPage,
        filter:this.Technologies.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.Technologies.queryResults = [];
        me.Technologies.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Technologies);
    });
}


// Manage Aggregations:
TechnologyArea.prototype.get_Technologies = function () {
    return this.Technologies.queryResults;
}




//
// Class "UseCase"
//

// Constructor
function UseCase (type, parent, id, isEmptyShell) {
    // Initialize base class
    Content.call(this, type, parent, id, isEmptyShell);


    // Properties:
    this.KPIs='text';


}

// Inheritance
UseCase.prototype = Object.create(Content.prototype);
UseCase.prototype.constructor = UseCase;


//
// Methods
//

UseCase.prototype.getShorthand = function (qr) {
    var res = "undefined";
    res = this._KPIs;
    return res;
}

UseCase.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;
    this._KPIs = qr.KPIs;

}


UseCase.prototype.get_KPIs = function () { return this._KPIs };
UseCase.prototype.set_KPIs = function (value) {
    if (this._KPIs===value) return;
    this._KPIs=value; this.changed=true; }; 

UseCase.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    propertiesOnly._id = this.id;
    propertiesOnly.type = this.type;
    propertiesOnly.parentID = this.parentID;
    propertiesOnly.parentRelnName = this.parentRelnName;
    propertiesOnly.relnID = this.relnID;

    propertiesOnly.KPIs = this.get_KPIs();

    return propertiesOnly;
}









//
// Class "I3C"
//

// Constructor
function I3C (type, parent, id, isEmptyShell) {
    // Initialize base class
    
    Base.call(this, type, parent, id, isEmptyShell);




    // Relationships:
    this.IndustrySectors = new Relationship(30, "IndustrySectors", this);
    this.ApplicationAreas = new Relationship(31, "ApplicationAreas", this);
    this.HotSpots = new Relationship(32, "HotSpots", this);
    this.StandardsOrganizations = new Relationship(33, "StandardsOrganizations", this);
    this.TechnologyAreas = new Relationship(34, "TechnologyAreas", this);
}

// Inheritance
I3C.prototype = Object.create(Base.prototype);
I3C.prototype.constructor = I3C;


//
// Methods
//

I3C.prototype.getShorthand = function (qr) {
    var res = "undefined";
    
    return res;
}

I3C.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;

}



I3C.prototype.propertiesOnly = function () {
    var propertiesOnly = {};
    return propertiesOnly;
}


I3C.prototype.updateRelationshipWithQueryResults = function (qr) {
    relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
    switch(relnName) {
        
        case "IndustrySectors":
            this.IndustrySectors.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.IndustrySectors.queryResults.push(target);
            }
        break;
        
        case "ApplicationAreas":
            this.ApplicationAreas.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.ApplicationAreas.queryResults.push(target);
            }
        break;
        
        case "HotSpots":
            this.HotSpots.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.HotSpots.queryResults.push(target);
            }
        break;
        
        case "StandardsOrganizations":
            this.StandardsOrganizations.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.StandardsOrganizations.queryResults.push(target);
            }
        break;
        
        case "TechnologyAreas":
            this.TechnologyAreas.queryResultsCount=qr.queryResultsCount;
            for (i in qr.result) {
                target = getI3CAdmin().findOrAddToEntityCache(qr.result[i]._id, qr.result[i].type, qr.result[i]);
                this.TechnologyAreas.queryResults.push(target);
            }
        break;
        
        default: throw "Invalid relationship name: "+relnName;
    }
}



I3C.prototype.query_IndustrySectors = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "IndustrySectors",
        parentRelnID: "30",
        targetType: "IndustrySector",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.IndustrySectors.currentPage,
        entitiesPerPage: this.IndustrySectors.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustrySectors.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustrySectors);
    });
}

I3C.prototype.getPotentialTargets4IndustrySectors = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "IndustrySector",
        sourceRelnName: "IndustrySectors",
        sourceRelnID: "30",
        currentPage: this.IndustrySectors.currentPage,
        entitiesPerPage:this.IndustrySectors.entitiesPerPage,
        filter:this.IndustrySectors.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustrySectors.queryResults = [];
        me.IndustrySectors.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustrySectors);
    });
}

I3C.prototype.query_ApplicationAreas = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "ApplicationAreas",
        parentRelnID: "31",
        targetType: "ApplicationArea",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.ApplicationAreas.currentPage,
        entitiesPerPage: this.ApplicationAreas.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.ApplicationAreas.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ApplicationAreas);
    });
}

I3C.prototype.getPotentialTargets4ApplicationAreas = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "ApplicationArea",
        sourceRelnName: "ApplicationAreas",
        sourceRelnID: "31",
        currentPage: this.ApplicationAreas.currentPage,
        entitiesPerPage:this.ApplicationAreas.entitiesPerPage,
        filter:this.ApplicationAreas.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.ApplicationAreas.queryResults = [];
        me.ApplicationAreas.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ApplicationAreas);
    });
}

I3C.prototype.query_HotSpots = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "HotSpots",
        parentRelnID: "32",
        targetType: "HotSpot",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.HotSpots.currentPage,
        entitiesPerPage: this.HotSpots.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.HotSpots.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.HotSpots);
    });
}

I3C.prototype.getPotentialTargets4HotSpots = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "HotSpot",
        sourceRelnName: "HotSpots",
        sourceRelnID: "32",
        currentPage: this.HotSpots.currentPage,
        entitiesPerPage:this.HotSpots.entitiesPerPage,
        filter:this.HotSpots.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.HotSpots.queryResults = [];
        me.HotSpots.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.HotSpots);
    });
}

I3C.prototype.query_StandardsOrganizations = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "StandardsOrganizations",
        parentRelnID: "33",
        targetType: "StandardsOrganization",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.StandardsOrganizations.currentPage,
        entitiesPerPage: this.StandardsOrganizations.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.StandardsOrganizations.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.StandardsOrganizations);
    });
}

I3C.prototype.getPotentialTargets4StandardsOrganizations = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "StandardsOrganization",
        sourceRelnName: "StandardsOrganizations",
        sourceRelnID: "33",
        currentPage: this.StandardsOrganizations.currentPage,
        entitiesPerPage:this.StandardsOrganizations.entitiesPerPage,
        filter:this.StandardsOrganizations.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.StandardsOrganizations.queryResults = [];
        me.StandardsOrganizations.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.StandardsOrganizations);
    });
}

I3C.prototype.query_TechnologyAreas = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "I3C",
        command: "AggregationQuery",
        parentRelnName: "TechnologyAreas",
        parentRelnID: "34",
        targetType: "TechnologyArea",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.TechnologyAreas.currentPage,
        entitiesPerPage: this.TechnologyAreas.entitiesPerPage
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.TechnologyAreas.queryResults = [];
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TechnologyAreas);
    });
}

I3C.prototype.getPotentialTargets4TechnologyAreas = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "I3C",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "TechnologyArea",
        sourceRelnName: "TechnologyAreas",
        sourceRelnID: "34",
        currentPage: this.TechnologyAreas.currentPage,
        entitiesPerPage:this.TechnologyAreas.entitiesPerPage,
        filter:this.TechnologyAreas.filter
    });
    var me = this;
    getI3CAdmin().processCRUDcommands(reqData, function(res) {
        me.TechnologyAreas.queryResults = [];
        me.TechnologyAreas.queryResultsCount = res.resultList[0].queryResultsCount;
        getI3CAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TechnologyAreas);
    });
}


// Manage Aggregations:
I3C.prototype.get_IndustrySectors = function () {
    return this.IndustrySectors.queryResults;
}

I3C.prototype.get_ApplicationAreas = function () {
    return this.ApplicationAreas.queryResults;
}

I3C.prototype.get_HotSpots = function () {
    return this.HotSpots.queryResults;
}

I3C.prototype.get_StandardsOrganizations = function () {
    return this.StandardsOrganizations.queryResults;
}

I3C.prototype.get_TechnologyAreas = function () {
    return this.TechnologyAreas.queryResults;
}






