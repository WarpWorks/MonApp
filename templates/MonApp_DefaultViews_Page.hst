{{Domain*}}<!-- Domain: #{{js:this.name;/}} -->
{{Entity*}}
<!-- Views for Entity: {{js:this.name;/}} -->
{{PageView*}}{{Options}} {"saveAs": ["views", "'app'+this.getParent_Entity().name+'_'+this.name+'.hbs'"] } {{/Options}}
<div class="panel panel-success">
    <div class="panel-heading"><b>{{js:this.getParent_Entity().name;/}}</b>
    </div>
    <div class="panel-body" id="{{js:this.name;/}}PB">
        <ul class="nav nav-tabs">
        {{Panel*}}
            <li {{js: this.itemIsFirst?'class="active"':''; /}}><a data-toggle="tab" href="#{{js:this.name;/}}Tab">{{js:this.label;/}}</a></li>
        {{/Panel}}
        </ul>
        <div class="tab-content">
            {{Panel*}}
            <div id="{{js:this.name;/}}Tab" class="tab-pane {{js: this.itemIsFirst?'fade in active':'fade'; /}}">
                <div class="panel-body">
                    {{BasicPropertyPanelItem?}}
                        <!--Body: {{js:this.name;/}}-->
                        <form class="form-horizontal">
                            {{BasicPropertyPanelItem*}}
                                <div class="form-group">
                                    <label for="{{js:this.name;/}}Input" class="col-sm-2 control-label">{{js:this.label;/}}
                                    </label>
                                    <div class="col-sm-10">
                                        <!-- TBD: Use unique names for IDs -->
                                        <input type="text" class="form-control" id="{{js:this.name;/}}Input">
                                    </div>
                                </div>
                            {{/BasicPropertyPanelItem}}
                        </form>
                        <script>
                            // Update form with entity`s properties
                            function {{js:this.getDomain().name;/}}_{{js:this.getParent_PageView().getParent_Entity().name;/}}_entity2{{js:this.name;/}} (entity) {{{BasicPropertyPanelItem*}}
                                $("#{{js:this.name;/}}Input").val(entity.get_{{js:this.name;/}}());{{/BasicPropertyPanelItem}}
                            }
                            // Update entity`s properties with values from form
                            function {{js:this.getDomain().name;/}}_{{js:this.getParent_PageView().getParent_Entity().name;/}}_{{js:this.name;/}}2entity (entity) {{{BasicPropertyPanelItem*}}
                                entity.set_{{js:this.name;/}}($("#{{js:this.name;/}}Input").val());{{/BasicPropertyPanelItem}}
                            }
                            // Callback to update form after entity is loaded
                            whenReady(function () {
                                get{{js:this.getDomain().name;/}}Admin().getEntityByID("{{js:this.getDomain().name;/}}", "{{js:this.getParent_PageView().getParent_Entity().name;/}}", $active.oid, function (entity) {
                                    {{js:this.getDomain().name;/}}_{{js:this.getParent_PageView().getParent_Entity().name;/}}_entity2{{js:this.name;/}}(entity);
                                });
                            });
                            // Callback to update entity with form data (use newly created entity, if needed)
                            onSave (function () {
                                if ($active.mode === "edit") {
                                    get{{js:this.getDomain().name;/}}Admin().getEntityByID("{{js:this.getDomain().name;/}}", "{{js:this.getParent_PageView().getParent_Entity().name;/}}", $active.oid, function (entity) {
                                       {{js:this.getDomain().name;/}}_{{js:this.getParent_PageView().getParent_Entity().name;/}}_{{js:this.name;/}}2entity (entity);
                                    });
                                }
                                else {
                                    var newEntity = get{{js:this.getDomain().name;/}}Admin().addNew_{{js:this.getParent_PageView().getParent_Entity().name;/}} ($active.parent.parentID, $active.parent.relnID, $active.parent.relnName);
                                    {{js:this.getDomain().name;/}}_{{js:this.getParent_PageView().getParent_Entity().name;/}}_{{js:this.name;/}}2entity (newEntity);
                                    $active.entity = newEntity;
                                }
                            });
                        </script>
                    {{/BasicPropertyPanelItem?}}
                    {{EnumPanelItem?}}
                        <hr>
                        <form class="form-horizontal">
                            {{EnumPanelItem*}}
                                <div class="form-group">
                                    <label for="{{js:this.name;/}}Selection" class="col-sm-2 control-label">{{js:this.name;/}}</label>
                                    <div class="col-sm-10">
                                        <select class="form-control" id="{{js:this.name;/}}Selection">
                                            {{js: (function () {
                                                res='';
                                                for (var i in this.getEnumeration().literals)
                                                    res += '<option>'+this.getEnumeration().literals[i]+'</option>';
                                                return res;
                                            }).call(this); /}}
                                        </select>
                                    </div>
                                </div>
                            {{/EnumPanelItem}}
                        </form>
                        <!-- TBD: Create functionality to save enum values!!! -->
                    {{/EnumPanelItem?}}
                    {{AssociationPanelItem?}}
                        <hr>
                        <form class="form-horizontal">
                            {{AssociationPanelItem*}}<!-- Add selection modal -->
                                {{> app{{js:this.getRelationship().getTargetEntity().name;/}}_SelectionModal }}

                                <!-- List of nav pills for entities in current association (similiar to a list of CSVs) -->
                                <div class="form-group">
                                    <label for="csv_{{js:this.name;/}}" class="col-sm-2 control-label">{{js:this.name;/}}
                                    </label>
                                    <div class="col-sm-10">
                                        <ul class="nav nav-pills" id="csv_{{js:this.name;/}}"></ul>
                                    </div>
                                </div>
                                <script>
                                    whenReady(function () {
                                        // Callback to update CSV list for current AssociationPanelItem
                                        {{js:this.name;/}}_updateCSVs ();
                                    });

                                    // Update CSV list in form:
                                    function {{js:this.name;/}}_updateCSVs () {
                                        // Create new CSV list with target entities:
                                        var reln = $active.entity.{{js:this.getRelationship().name;/}};
                                        $("#csv_{{js:this.name;/}}").empty();
                                        for (i in $active.entity[reln.name].assocTargets) {
                                            var target = $active.entity[reln.name].assocTargets[i];
                                            var elemID = "{{js:this.name;/}}-CSV:"+target.id;
                                            var elem = $("<li role='presentation' id='"+elemID+"'><a href='#'>"+target.label+"</a></li>");
                                            $("#csv_{{js:this.name;/}}").append(elem);
                                            elem.click(function () {
                                                var id = $(this).attr("id").split(":")[1];
                                                console.log("ID:"+id);
                                                window.location.href = "./../app/{{js:this.getRelationship().getTargetEntity().name;/}}?oid="+id;
                                            });
                                        }

                                        // Add pill with callback to edit target entities
                                        var editPill = $("<li><a href='#'><span class='glyphicon glyphicon-edit'></span></a></li>");
                                        $("#csv_{{js:this.name;/}}").append(editPill);

                                        // Register callback to prepare and open modal for editing current association:
                                        editPill.on("click", function () {
                                            // Set active relationship. This works because we allow only one active modal:
                                            $active.relationship = $active.entity.{{js:this.getRelationship().name;/}};

                                            // Get potential targets for current association, update modal
                                            $active.entity.getPotentialTargets4{{js:this.getRelationship().name;/}}(
                                                {{js:this.getRelationship().getTargetEntity().name;/}}_updateSelectEntityModal);

                                            // Remember the update function so that later we are able to update the CSV list again
                                            $active.relationship.updateCSV = {{js:this.name;/}}_updateCSVs;

                                            // Create EntityTable object to support modal updates:
                                            var widgetID="{{js:this.getRelationship().getTargetEntity().name;/}}";
                                            if (!$active.entityTables[widgetID]) {
                                                var columns = [ {{js: (function () {
                                                        var res="";
                                                        var tableView = this.getRelationship().getTargetEntity().getDefaultTableView();
                                                        if (!tableView) {
                                                            console.log("Warning: No default TableView for "+this.getRelationship().getTargetEntity().name);
                                                            return "";
                                                        }
                                                        for (var idx=0; idx<tableView.tableItems.length; idx++)
                                                            res += (idx===0?"":", ") + "'"+tableView.tableItems[idx].getProperty().name+"'";
                                                        return res;
                                                }).call(this); /}} ];
                                                var newEntityTable = new EntityTable (widgetID, "selectEntityM", columns, $active.relationship);
                                                newEntityTable.updateRelationshipAndWidget = function () {
                                                    $active.entity.getPotentialTargets4{{js:this.getRelationship().name;/}}(
                                                        {{js:this.getRelationship().getTargetEntity().name;/}}_updateSelectEntityModal);
                                                }
                                            }

                                            // And now open the modal window
                                            $("#selectEntityM").modal();
                                        });
                                    }
                                </script>
                            {{/AssociationPanelItem}}
                        </form>
                    {{/AssociationPanelItem?}}
                    {{AggregationPanelItem*}}

                        <!-- Include Default Table View here: -->
                        {{> app{{js:this.getRelationship().getTargetEntity().name;/}}_DefaultTableView }}

                        <!-- Menu to add new entities -->
                        <div class="dropdown">
                            <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
                                Add <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" id="TV{{js:this.id/}}"></ul>
                        </div>
                        <script>
                            whenReady(function () {
                                // Get active entity; query for child entities in current aggregation; update table with results
                                get{{js:this.getDomain().name;/}}Admin().getEntityByID("{{js:this.getDomain().name;/}}", "{{js:this.getParent_Panel().getParent_PageView().getParent_Entity().name;/}}", $active.oid, function(entity) {
                                        entity.query_{{js:this.getRelationship().name;/}}(
                                            {{js:this.getRelationship().getTargetEntity().name;/}}_updateDefaultTableView);
                                });
                                // Create button to add new child elements to the current aggregation:
                                $("#TV{{js:this.id/}}").append("<li><a href='./{{js: this.getRelationship().getTargetEntity().name; /}}?parentID="+$active.oid+"&relnID={{js: this.getRelationship().id;/}}&relnName={{js:this.getRelationship().name;/}}'>Add {{js: this.getRelationship().getTargetEntity().name; /}}</a></li>");
                                // Add buttons to create derived entities:
                                {{js: (function () {
                                    var derivedEntities = this.getRelationship().getTargetEntity().getAllDerivedEntities();
                                    var res = "";
                                    for (i in derivedEntities) {
                                        // TBD: Ignore abstract entities!
                                        var derivedEntity = derivedEntities[i];
                                        res += "$(\"#TV"+this.id+"\").append(\"<li><a href='"+derivedEntity.name+"?parentID=\"+$active.oid+\"&relnID="+this.id+"&relnName="+this.name+"'>Add "+derivedEntity.name+"</a></li>\");";
                                    }
                                    return res;
                                }).call(this); /}}
                            });
                        </script>
                    {{/AggregationPanelItem}}
                </div>
            </div>
            {{/Panel}}
        </div>
    </div>
</div>
{{/PageView}}
{{/Entity}}
{{/Domain}}
