// ***************************************************************************************************** //
        // MonApp Web API for Domain: IIC
        // Generated by HeadStart::MonApp, version: v0.1
        // Generated on: 2017-03-01 17:50:34
        // ***************************************************************************************************** //

        //
        // Global helpers
        //

        $active = { initCalls: [], onSave: [], initialized:false };
        whenReady = function (fct) {
        if ($active.initialized) fct.call();
        else $active.initCalls.push(fct);
        }
        onSave = function (fct) {
        $active.onSave.push(fct);
        }
        saveHandler = function () {
        $active.onSave.forEach(function (fct) {
        fct.call();
        });
        getIICAdmin().save("IIC");
        }
        deleteHandler = function () {
        getIICAdmin().delete("IIC");
        }

        $(window).unload(function() {
        saveHandler("IIC");
        });

        // Handler for Nav elements from _contentLayout.hbs
        $(document).ready(function () {
        $("#NavButtonSaveA").on("click", saveHandler);
        $("#NavButtonDeleteA").on("click", deleteHandler);
        //TBD: $("#NavButtonCancelA").on("click", cancelHandler);
        });

        //
        // IICAdmin Interface
        //

        // TBD: use global variable with shorter name...

        var _IICAdmin = null;

        getIICAdmin = function  () {
        if (!_IICAdmin)
        _IICAdmin = new IICAdmin ();
        return _IICAdmin;
        }

        function IICAdmin() {
        this._rootInstance = null;
        this._entityCache = {};
        }

        IICAdmin.prototype.getRootInstance = function (domain, handleResult) {
        if (this._rootInstance) {
        handleResult(this._rootInstance);
        return;
        }
        console.log("Getting root entity for "+domain);
        var reqData = {
        commandList: [
        {
        command: "GetRootInstance",
        domain: domain,
        targetType: domain
        }
        ]
        };
        this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
        if (!result.resultList || result.resultList.length!=1) {
        alert("Could not find RootInstance - potential Server error");
        return;
        }
        if (result.resultList[0].error) {
        alert(result.resultList[0].status);
        return;
        }
        var rootInstanceFromServer = result.resultList[0].rootInstance;
        console.log("RootInstanceID: " + rootInstanceFromServer._id);
        var newRootInstance = new IIC ("IIC", null, rootInstanceFromServer._id, false);
        getIICAdmin()._rootInstance = newRootInstance;
        handleResult (newRootInstance);
        }
        else {
        alert(result.err);
        }
        });
        }

        IICAdmin.prototype.getEntityByID = function (domain, targetType, entityID, handleResult) {
        var target = this._entityCache[entityID];
        if (target) {
        handleResult(target);
        return;
        }
        console.log("Getting entity by ID from domain "+domain);
        var reqData = {
        commandList: [
        {
        command: "FindByID",
        domain: domain,
        targetType: targetType,
        targetID: entityID
        }
        ]
        };
        this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
        if (!result.resultList || result.resultList.length!=1) {
        alert("Could not find entity!");
        handleResult (null);
        return;
        }
        if (result.resultList[0].error) {
        alert(result.resultList[0].status);
        handleResult (null);
        return;
        }
        var result = result.resultList[0];
        var entityFromServer = result.matchingEntity;
        var newEntity = getIICAdmin().findOrAddToEntityCache (entityID, entityFromServer.type);
        newEntity.updatePropertiesWithQueryResults(entityFromServer);
        newEntity.breadcrumb = result.breadcrumb;
        handleResult (newEntity);
        }
        else {
        alert(result.err);
        }
        });
        }

        IICAdmin.prototype.getEntitiesByType = function (domain, targetType, handleResult) {
        console.log("Getting entities by Type from domain "+domain);
        var reqData = {
        commandList: [
        {
        command: "FindByType",
        domain: domain,
        targetType: targetType
        }
        ]
        };
        this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
        if (!result.resultList) {
        alert("Could not find entities!");
        handleResult (null);
        return;
        }
        if (result.resultList[0].error) {
        alert(result.resultList[0].status);
        handleResult (null);
        return;
        }
        var resList = [];
        for (i in result.resultList[0].queryResult) {
        var res = result.resultList[0].result[i];
        var newEntity = getIICAdmin().findOrAddToEntityCache (res._id, res.type);
        newEntity.updatePropertiesWithQueryResults(res);
        resList.push(newEntity);
        }
        handleResult (resList);
        }
        else {
        alert(result.err);
        }
        });
        }


        IICAdmin.prototype.addNew_Account = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Account = new Account ("Account", null, null, false);
        new_Account.parentID = parentID;
        new_Account.parentRelnName = relnName;
        new_Account.parentRelnID = relnID;
        new_Account.parentBaseClassID = parentBaseClassID;
        new_Account.parentBaseClassName = parentBaseClassName;
        new_Account.isNew = true;
        return new_Account;
        }

        IICAdmin.prototype.addNew_Content = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Content = new Content ("Content", null, null, false);
        new_Content.parentID = parentID;
        new_Content.parentRelnName = relnName;
        new_Content.parentRelnID = relnID;
        new_Content.parentBaseClassID = parentBaseClassID;
        new_Content.parentBaseClassName = parentBaseClassName;
        new_Content.isNew = true;
        return new_Content;
        }

        IICAdmin.prototype.addNew_ApplicationArea = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_ApplicationArea = new ApplicationArea ("ApplicationArea", null, null, false);
        new_ApplicationArea.parentID = parentID;
        new_ApplicationArea.parentRelnName = relnName;
        new_ApplicationArea.parentRelnID = relnID;
        new_ApplicationArea.parentBaseClassID = parentBaseClassID;
        new_ApplicationArea.parentBaseClassName = parentBaseClassName;
        new_ApplicationArea.isNew = true;
        return new_ApplicationArea;
        }

        IICAdmin.prototype.addNew_ArchitectureLayer = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_ArchitectureLayer = new ArchitectureLayer ("ArchitectureLayer", null, null, false);
        new_ArchitectureLayer.parentID = parentID;
        new_ArchitectureLayer.parentRelnName = relnName;
        new_ArchitectureLayer.parentRelnID = relnID;
        new_ArchitectureLayer.parentBaseClassID = parentBaseClassID;
        new_ArchitectureLayer.parentBaseClassName = parentBaseClassName;
        new_ArchitectureLayer.isNew = true;
        return new_ArchitectureLayer;
        }

        IICAdmin.prototype.addNew_ArchitecturePattern = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_ArchitecturePattern = new ArchitecturePattern ("ArchitecturePattern", null, null, false);
        new_ArchitecturePattern.parentID = parentID;
        new_ArchitecturePattern.parentRelnName = relnName;
        new_ArchitecturePattern.parentRelnID = relnID;
        new_ArchitecturePattern.parentBaseClassID = parentBaseClassID;
        new_ArchitecturePattern.parentBaseClassName = parentBaseClassName;
        new_ArchitecturePattern.isNew = true;
        return new_ArchitecturePattern;
        }

        IICAdmin.prototype.addNew_BSSL = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_BSSL = new BSSL ("BSSL", null, null, false);
        new_BSSL.parentID = parentID;
        new_BSSL.parentRelnName = relnName;
        new_BSSL.parentRelnID = relnID;
        new_BSSL.parentBaseClassID = parentBaseClassID;
        new_BSSL.parentBaseClassName = parentBaseClassName;
        new_BSSL.isNew = true;
        return new_BSSL;
        }

        IICAdmin.prototype.addNew_BodyOfKnowledge = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_BodyOfKnowledge = new BodyOfKnowledge ("BodyOfKnowledge", null, null, false);
        new_BodyOfKnowledge.parentID = parentID;
        new_BodyOfKnowledge.parentRelnName = relnName;
        new_BodyOfKnowledge.parentRelnID = relnID;
        new_BodyOfKnowledge.parentBaseClassID = parentBaseClassID;
        new_BodyOfKnowledge.parentBaseClassName = parentBaseClassName;
        new_BodyOfKnowledge.isNew = true;
        return new_BodyOfKnowledge;
        }

        IICAdmin.prototype.addNew_Certification = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Certification = new Certification ("Certification", null, null, false);
        new_Certification.parentID = parentID;
        new_Certification.parentRelnName = relnName;
        new_Certification.parentRelnID = relnID;
        new_Certification.parentBaseClassID = parentBaseClassID;
        new_Certification.parentBaseClassName = parentBaseClassName;
        new_Certification.isNew = true;
        return new_Certification;
        }

        IICAdmin.prototype.addNew_HotSpot = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_HotSpot = new HotSpot ("HotSpot", null, null, false);
        new_HotSpot.parentID = parentID;
        new_HotSpot.parentRelnName = relnName;
        new_HotSpot.parentRelnID = relnID;
        new_HotSpot.parentBaseClassID = parentBaseClassID;
        new_HotSpot.parentBaseClassName = parentBaseClassName;
        new_HotSpot.isNew = true;
        return new_HotSpot;
        }

        IICAdmin.prototype.addNew_I3C = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_I3C = new I3C ("I3C", null, null, false);
        new_I3C.parentID = parentID;
        new_I3C.parentRelnName = relnName;
        new_I3C.parentRelnID = relnID;
        new_I3C.parentBaseClassID = parentBaseClassID;
        new_I3C.parentBaseClassName = parentBaseClassName;
        new_I3C.isNew = true;
        return new_I3C;
        }

        IICAdmin.prototype.addNew_IIRA = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_IIRA = new IIRA ("IIRA", null, null, false);
        new_IIRA.parentID = parentID;
        new_IIRA.parentRelnName = relnName;
        new_IIRA.parentRelnID = relnID;
        new_IIRA.parentBaseClassID = parentBaseClassID;
        new_IIRA.parentBaseClassName = parentBaseClassName;
        new_IIRA.isNew = true;
        return new_IIRA;
        }

        IICAdmin.prototype.addNew_IISF = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_IISF = new IISF ("IISF", null, null, false);
        new_IISF.parentID = parentID;
        new_IISF.parentRelnName = relnName;
        new_IISF.parentRelnID = relnID;
        new_IISF.parentBaseClassID = parentBaseClassID;
        new_IISF.parentBaseClassName = parentBaseClassName;
        new_IISF.isNew = true;
        return new_IISF;
        }

        IICAdmin.prototype.addNew_IndustrySector = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_IndustrySector = new IndustrySector ("IndustrySector", null, null, false);
        new_IndustrySector.parentID = parentID;
        new_IndustrySector.parentRelnName = relnName;
        new_IndustrySector.parentRelnID = relnID;
        new_IndustrySector.parentBaseClassID = parentBaseClassID;
        new_IndustrySector.parentBaseClassName = parentBaseClassName;
        new_IndustrySector.isNew = true;
        return new_IndustrySector;
        }

        IICAdmin.prototype.addNew_IndustryVertical = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_IndustryVertical = new IndustryVertical ("IndustryVertical", null, null, false);
        new_IndustryVertical.parentID = parentID;
        new_IndustryVertical.parentRelnName = relnName;
        new_IndustryVertical.parentRelnID = relnID;
        new_IndustryVertical.parentBaseClassID = parentBaseClassID;
        new_IndustryVertical.parentBaseClassName = parentBaseClassName;
        new_IndustryVertical.isNew = true;
        return new_IndustryVertical;
        }

        IICAdmin.prototype.addNew_Member = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Member = new Member ("Member", null, null, false);
        new_Member.parentID = parentID;
        new_Member.parentRelnName = relnName;
        new_Member.parentRelnID = relnID;
        new_Member.parentBaseClassID = parentBaseClassID;
        new_Member.parentBaseClassName = parentBaseClassName;
        new_Member.isNew = true;
        return new_Member;
        }

        IICAdmin.prototype.addNew_Organization = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Organization = new Organization ("Organization", null, null, false);
        new_Organization.parentID = parentID;
        new_Organization.parentRelnName = relnName;
        new_Organization.parentRelnID = relnID;
        new_Organization.parentBaseClassID = parentBaseClassID;
        new_Organization.parentBaseClassName = parentBaseClassName;
        new_Organization.isNew = true;
        return new_Organization;
        }

        IICAdmin.prototype.addNew_Standard = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Standard = new Standard ("Standard", null, null, false);
        new_Standard.parentID = parentID;
        new_Standard.parentRelnName = relnName;
        new_Standard.parentRelnID = relnID;
        new_Standard.parentBaseClassID = parentBaseClassID;
        new_Standard.parentBaseClassName = parentBaseClassName;
        new_Standard.isNew = true;
        return new_Standard;
        }

        IICAdmin.prototype.addNew_StandardsOrganization = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_StandardsOrganization = new StandardsOrganization ("StandardsOrganization", null, null, false);
        new_StandardsOrganization.parentID = parentID;
        new_StandardsOrganization.parentRelnName = relnName;
        new_StandardsOrganization.parentRelnID = relnID;
        new_StandardsOrganization.parentBaseClassID = parentBaseClassID;
        new_StandardsOrganization.parentBaseClassName = parentBaseClassName;
        new_StandardsOrganization.isNew = true;
        return new_StandardsOrganization;
        }

        IICAdmin.prototype.addNew_TaskGroup = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_TaskGroup = new TaskGroup ("TaskGroup", null, null, false);
        new_TaskGroup.parentID = parentID;
        new_TaskGroup.parentRelnName = relnName;
        new_TaskGroup.parentRelnID = relnID;
        new_TaskGroup.parentBaseClassID = parentBaseClassID;
        new_TaskGroup.parentBaseClassName = parentBaseClassName;
        new_TaskGroup.isNew = true;
        return new_TaskGroup;
        }

        IICAdmin.prototype.addNew_Technology = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Technology = new Technology ("Technology", null, null, false);
        new_Technology.parentID = parentID;
        new_Technology.parentRelnName = relnName;
        new_Technology.parentRelnID = relnID;
        new_Technology.parentBaseClassID = parentBaseClassID;
        new_Technology.parentBaseClassName = parentBaseClassName;
        new_Technology.isNew = true;
        return new_Technology;
        }

        IICAdmin.prototype.addNew_TechnologyArea = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_TechnologyArea = new TechnologyArea ("TechnologyArea", null, null, false);
        new_TechnologyArea.parentID = parentID;
        new_TechnologyArea.parentRelnName = relnName;
        new_TechnologyArea.parentRelnID = relnID;
        new_TechnologyArea.parentBaseClassID = parentBaseClassID;
        new_TechnologyArea.parentBaseClassName = parentBaseClassName;
        new_TechnologyArea.isNew = true;
        return new_TechnologyArea;
        }

        IICAdmin.prototype.addNew_UseCase = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_UseCase = new UseCase ("UseCase", null, null, false);
        new_UseCase.parentID = parentID;
        new_UseCase.parentRelnName = relnName;
        new_UseCase.parentRelnID = relnID;
        new_UseCase.parentBaseClassID = parentBaseClassID;
        new_UseCase.parentBaseClassName = parentBaseClassName;
        new_UseCase.isNew = true;
        return new_UseCase;
        }

        IICAdmin.prototype.addNew_User = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_User = new User ("User", null, null, false);
        new_User.parentID = parentID;
        new_User.parentRelnName = relnName;
        new_User.parentRelnID = relnID;
        new_User.parentBaseClassID = parentBaseClassID;
        new_User.parentBaseClassName = parentBaseClassName;
        new_User.isNew = true;
        return new_User;
        }

        IICAdmin.prototype.addNew_WorkGroup = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_WorkGroup = new WorkGroup ("WorkGroup", null, null, false);
        new_WorkGroup.parentID = parentID;
        new_WorkGroup.parentRelnName = relnName;
        new_WorkGroup.parentRelnID = relnID;
        new_WorkGroup.parentBaseClassID = parentBaseClassID;
        new_WorkGroup.parentBaseClassName = parentBaseClassName;
        new_WorkGroup.isNew = true;
        return new_WorkGroup;
        }

        IICAdmin.prototype.addNew_IIC = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_IIC = new IIC ("IIC", null, null, false);
        new_IIC.parentID = parentID;
        new_IIC.parentRelnName = relnName;
        new_IIC.parentRelnID = relnID;
        new_IIC.parentBaseClassID = parentBaseClassID;
        new_IIC.parentBaseClassName = parentBaseClassName;
        new_IIC.isNew = true;
        return new_IIC;
        }

        IICAdmin.prototype.addNew_Image = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Image = new Image ("Image", null, null, false);
        new_Image.parentID = parentID;
        new_Image.parentRelnName = relnName;
        new_Image.parentRelnID = relnID;
        new_Image.parentBaseClassID = parentBaseClassID;
        new_Image.parentBaseClassName = parentBaseClassName;
        new_Image.isNew = true;
        return new_Image;
        }

        IICAdmin.prototype.addNew_ImageArea = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_ImageArea = new ImageArea ("ImageArea", null, null, false);
        new_ImageArea.parentID = parentID;
        new_ImageArea.parentRelnName = relnName;
        new_ImageArea.parentRelnID = relnID;
        new_ImageArea.parentBaseClassID = parentBaseClassID;
        new_ImageArea.parentBaseClassName = parentBaseClassName;
        new_ImageArea.isNew = true;
        return new_ImageArea;
        }

        IICAdmin.prototype.addNew_Paragraph = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Paragraph = new Paragraph ("Paragraph", null, null, false);
        new_Paragraph.parentID = parentID;
        new_Paragraph.parentRelnName = relnName;
        new_Paragraph.parentRelnID = relnID;
        new_Paragraph.parentBaseClassID = parentBaseClassID;
        new_Paragraph.parentBaseClassName = parentBaseClassName;
        new_Paragraph.isNew = true;
        return new_Paragraph;
        }

        IICAdmin.prototype.addNew_Role = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Role = new Role ("Role", null, null, false);
        new_Role.parentID = parentID;
        new_Role.parentRelnName = relnName;
        new_Role.parentRelnID = relnID;
        new_Role.parentBaseClassID = parentBaseClassID;
        new_Role.parentBaseClassName = parentBaseClassName;
        new_Role.isNew = true;
        return new_Role;
        }

        IICAdmin.prototype.addNew_Testbed = function (parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
        var new_Testbed = new Testbed ("Testbed", null, null, false);
        new_Testbed.parentID = parentID;
        new_Testbed.parentRelnName = relnName;
        new_Testbed.parentRelnID = relnID;
        new_Testbed.parentBaseClassID = parentBaseClassID;
        new_Testbed.parentBaseClassName = parentBaseClassName;
        new_Testbed.isNew = true;
        return new_Testbed;
        }



        IICAdmin.prototype.save = function (domain) {
        this.saveNewEntity(domain);
        this.saveChangedEntities(domain);
        }

        IICAdmin.prototype.delete = function (domain) {
        console.log("Deleting Entity: "+$active.entity.type+":"+$active.entity.id);
        if ($active.entity === null) return;
        var reqData = {
        commandList: [
        {
        command: "Delete",
        domain: domain,
        targetType: $active.entity.type,
        id: $active.entity.id
        }
        ]
        };
        this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
        console.log("Delete: OK!");
        var pn = $active.entity.parentBaseClassName; // TBD - this should be the real type, not the base type!!! But this would actually require storing this info in the child as well...
        var oid = $active.entity.parentID;
        window.location.href = "./../app/"+pn+"?oid="+oid;
        }
        else {
        alert(result.err);
        }
        });
        }


        IICAdmin.prototype.saveNewEntity = function (domain) {
        if ($active.entity === null || !$active.entity.isNew) return;
        var newEntity = $active.entity.propertiesOnly();
        var reqData = {
        commandList: [
        {
        command: "Create",
        domain: domain,
        targetType: $active.entity.type,
        entity: newEntity
        }
        ]
        };
        this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
        console.log("Create: OK!");
        var e=result.newEntity;
        $active.entity.id=e.newID;
        $active.entity.isNew=false;
        $active.mode="edit";
        window.location.href = "./../app/"+e.type+"?oid="+e._id;
        }
        else {
        alert(result.err);
        }
        });
        }

        IICAdmin.prototype.saveChangedEntities = function (domain) {
        var changedEntities = this.getChangedEntities();
        if (!changedEntities || changedEntities.length===0) return;

        var entitiesWithPropertiesOnly = [];
        for (i in changedEntities) {
        entitiesWithPropertiesOnly.push(changedEntities[i].propertiesOnly());
        changedEntities[i].changed = false;
        }

        var reqData = {
        commandList: [
        {
        command: "Update",
        domain: domain,
        targetType: entitiesWithPropertiesOnly[0].type, // TBD: DIRTY HACK - must be changed on the server side to work with multiple entities!
        entities: entitiesWithPropertiesOnly
        }
        ]
        };
        this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
        console.log("Save: OK!");
        }
        else {
        alert(result.err);
        }
        });
        }

        IICAdmin.prototype.processCRUDcommands = function (commandList, handleResult) {
        //Create JSON Data
        var reqData = JSON.stringify(commandList, null, 2)

        // Post to server
        $.ajax({
        url: '/appApi/CRUD',
        type: 'POST',
        data: reqData,
        contentType: 'application/json; charset=utf-8',
        dataType: "json",
        success: function (result) {
        if (result.success) {
        handleResult (result);
        }
        else {
        console.log("Failed to post CRUD commands: " + result.error);
        }
        },
        error: function () {
        console.log("Error while posting CRUD commands!");
        }
        });
        }

        IICAdmin.prototype.getChangedEntities = function () {
        var result = [];
        for (i in this._entityCache) {
        if (this._entityCache[i].changed) result.push(this._entityCache[i]);
        }
        return result;
        }

        IICAdmin.prototype.findOrAddToEntityCache = function (entityID, entityType, queryResult) {
        var target = this._entityCache[entityID];
        if (target) return target;
        var newEntity=null;
        switch (entityType) {
        case "Account": newEntity = new Account ("Account", null, entityID, true); break;
        case "Content": newEntity = new Content ("Content", null, entityID, true); break;
        case "ApplicationArea": newEntity = new ApplicationArea ("ApplicationArea", null, entityID, true); break;
        case "ArchitectureLayer": newEntity = new ArchitectureLayer ("ArchitectureLayer", null, entityID, true); break;
        case "ArchitecturePattern": newEntity = new ArchitecturePattern ("ArchitecturePattern", null, entityID, true); break;
        case "BSSL": newEntity = new BSSL ("BSSL", null, entityID, true); break;
        case "BodyOfKnowledge": newEntity = new BodyOfKnowledge ("BodyOfKnowledge", null, entityID, true); break;
        case "Certification": newEntity = new Certification ("Certification", null, entityID, true); break;
        case "HotSpot": newEntity = new HotSpot ("HotSpot", null, entityID, true); break;
        case "I3C": newEntity = new I3C ("I3C", null, entityID, true); break;
        case "IIRA": newEntity = new IIRA ("IIRA", null, entityID, true); break;
        case "IISF": newEntity = new IISF ("IISF", null, entityID, true); break;
        case "IndustrySector": newEntity = new IndustrySector ("IndustrySector", null, entityID, true); break;
        case "IndustryVertical": newEntity = new IndustryVertical ("IndustryVertical", null, entityID, true); break;
        case "Member": newEntity = new Member ("Member", null, entityID, true); break;
        case "Organization": newEntity = new Organization ("Organization", null, entityID, true); break;
        case "Standard": newEntity = new Standard ("Standard", null, entityID, true); break;
        case "StandardsOrganization": newEntity = new StandardsOrganization ("StandardsOrganization", null, entityID, true); break;
        case "TaskGroup": newEntity = new TaskGroup ("TaskGroup", null, entityID, true); break;
        case "Technology": newEntity = new Technology ("Technology", null, entityID, true); break;
        case "TechnologyArea": newEntity = new TechnologyArea ("TechnologyArea", null, entityID, true); break;
        case "UseCase": newEntity = new UseCase ("UseCase", null, entityID, true); break;
        case "User": newEntity = new User ("User", null, entityID, true); break;
        case "WorkGroup": newEntity = new WorkGroup ("WorkGroup", null, entityID, true); break;
        case "IIC": newEntity = new IIC ("IIC", null, entityID, true); break;
        case "Image": newEntity = new Image ("Image", null, entityID, true); break;
        case "ImageArea": newEntity = new ImageArea ("ImageArea", null, entityID, true); break;
        case "Paragraph": newEntity = new Paragraph ("Paragraph", null, entityID, true); break;
        case "Role": newEntity = new Role ("Role", null, entityID, true); break;
        case "Testbed": newEntity = new Testbed ("Testbed", null, entityID, true); break;
        default: throw "Unknown Entity Type: "+entityType;
        }
        if (queryResult) newEntity.updatePropertiesWithQueryResults(queryResult);
        return newEntity;
        }

        IICAdmin.prototype.updateEntityCacheWithQueryResults = function (queryResults) {
        if (!queryResults || queryResults.error) throw "Error updating entity cache!"
        queryResults.resultList.forEach (function (queryResult) {
        switch (queryResult.queryType) {
        case "RootInstance":
        getIICAdmin()._rootInstance = new IIC ("IIC", null, null);
        break;
        case "AggregationQuery":
        var parent = getIICAdmin().findOrAddToEntityCache(queryResult.parentID, queryResult.parentType);
        parent.updateRelationshipWithQueryResults (queryResult);
        break;
        case "FindAssocTargetOptions":
        var source = getIICAdmin().findOrAddToEntityCache(queryResult.sourceID, queryResult.sourceType);
        source.updateRelationshipWithQueryResults (queryResult);
        break;
        default:
        console.log("Unknown query type: "+queryResult.queryType);
        }
        });
        }

        //
        // Class "Relationship"
        //

        function Relationship(id, name, parent) {
        this.name = name;
        this.id = id;
        this.parent = parent;
        this.currentPage = 0;
        this.entitiesPerPage = 4;
        this.maxNumberOfPages = 5;
        this.filter = null;

        this.queryResults = [];
        this.queryResultsCount = -1;

        this.assocTargets = [];
        }

        Relationship.prototype.setFilter = function (f) {
        this.filter = f;
        this.currentPage=0;
        }

        Relationship.prototype.removeFromAssocTargets = function (id) {
        var newSelections = [];
        for (i in this.assocTargets) {
        if (this.assocTargets[i].id !== id)
        newSelections.push(this.assocTargets[i]);
        }
        this.assocTargets = newSelections;
        }

        //
        // Class "Base"
        //

        function Base(type, parent, id, isEmptyShell) {
        this.type = type;
        this.parent = parent;
        this.id = id;
        this.isEmptyShell = isEmptyShell;
        this.isNew = false;
        this.properties_NameOnly = false;
        this.properties_Valid = false;
        this.changed = false;

        if (id)
        getIICAdmin()._entityCache[id] = this;
        else {
        if ($active.entity)
        console.log("Warning: $active.entity already exists!");
        $active.entity = this;
        }
        }

        Base.prototype.compareToMyID = function (id) {
        return ""+this.id === ""+id;
        }

        //
        // Class "Account"
        //

        // Constructor
        function Account (type, parent, id, isEmptyShell) {
        // Initialize base class

        Base.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.UserName='text';
        this.Password='text';


        }

        // Inheritance
        Account.prototype = Object.create(Base.prototype);
        Account.prototype.constructor = Account;


        //
        // Methods
        //

        Account.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._UserName;
        return res;
        }

        Account.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._UserName = qr.UserName;
        this._Password = qr.Password;

        }


        Account.prototype.get_UserName = function () { return this._UserName };
        Account.prototype.set_UserName = function (value) {
        if (this._UserName===value) return;
        this._UserName=value; this.changed=true; };
        Account.prototype.get_Password = function () { return this._Password };
        Account.prototype.set_Password = function (value) {
        if (this._Password===value) return;
        this._Password=value; this.changed=true; };

        Account.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.UserName = this.get_UserName();
        propertiesOnly.Password = this.get_Password();

        return propertiesOnly;
        }









        //
        // Class "Content"
        //

        // Constructor
        function Content (type, parent, id, isEmptyShell) {
        // Initialize base class

        Base.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.Name='text';


        // Relationships:
        this.Overview = new Relationship(20, "Overview", this);
        this.ReadAccess = new Relationship(21, "ReadAccess", this);
        this.WriteAccess = new Relationship(22, "WriteAccess", this);
        }

        // Inheritance
        Content.prototype = Object.create(Base.prototype);
        Content.prototype.constructor = Content;


        //
        // Methods
        //

        Content.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        Content.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }


        Content.prototype.get_Name = function () { return this._Name };
        Content.prototype.set_Name = function (value) {
        if (this._Name===value) return;
        this._Name=value; this.changed=true; };

        Content.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        Content.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        Content.prototype.query_Overview = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Overview",
        parentRelnID: "20",
        targetType: "Paragraph",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Overview.currentPage,
        entitiesPerPage: this.Overview.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Overview.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Overview, me);
        });
        }

        Content.prototype.getPotentialTargets4Overview = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Paragraph",
        sourceRelnName: "Overview",
        sourceRelnID: "20",
        currentPage: this.Overview.currentPage,
        entitiesPerPage:this.Overview.entitiesPerPage,
        filter:this.Overview.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Overview.queryResults = [];
        me.Overview.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Overview);
        });
        }

        Content.prototype.query_ReadAccess = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "ReadAccess",
        parentRelnID: "21",
        targetType: "Role",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.ReadAccess.currentPage,
        entitiesPerPage: this.ReadAccess.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.ReadAccess.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ReadAccess, me);
        });
        }

        Content.prototype.getPotentialTargets4ReadAccess = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Role",
        sourceRelnName: "ReadAccess",
        sourceRelnID: "21",
        currentPage: this.ReadAccess.currentPage,
        entitiesPerPage:this.ReadAccess.entitiesPerPage,
        filter:this.ReadAccess.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.ReadAccess.queryResults = [];
        me.ReadAccess.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ReadAccess);
        });
        }

        Content.prototype.query_WriteAccess = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "WriteAccess",
        parentRelnID: "22",
        targetType: "Role",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.WriteAccess.currentPage,
        entitiesPerPage: this.WriteAccess.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.WriteAccess.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.WriteAccess, me);
        });
        }

        Content.prototype.getPotentialTargets4WriteAccess = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Role",
        sourceRelnName: "WriteAccess",
        sourceRelnID: "22",
        currentPage: this.WriteAccess.currentPage,
        entitiesPerPage:this.WriteAccess.entitiesPerPage,
        filter:this.WriteAccess.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.WriteAccess.queryResults = [];
        me.WriteAccess.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.WriteAccess);
        });
        }


        // Manage Aggregations:
        Content.prototype.get_Overview = function () {
        return this.Overview.queryResults;
        }


        // Manage Associations:
        Content.prototype.get_ReadAccess = function () {
        return this.ReadAccess.queryResults;
        }

        Content.prototype.get_WriteAccess = function () {
        return this.WriteAccess.queryResults;
        }


        //
        // Class "ApplicationArea"
        //

        // Constructor
        function ApplicationArea (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.UseCases = new Relationship(74, "UseCases", this);
        }

        // Inheritance
        ApplicationArea.prototype = Object.create(Content.prototype);
        ApplicationArea.prototype.constructor = ApplicationArea;


        //
        // Methods
        //

        ApplicationArea.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        ApplicationArea.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        ApplicationArea.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        ApplicationArea.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "UseCases":
        this.UseCases.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.UseCases.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        ApplicationArea.prototype.query_UseCases = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "UseCases",
        parentRelnID: "74",
        targetType: "UseCase",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.UseCases.currentPage,
        entitiesPerPage: this.UseCases.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.UseCases.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.UseCases, me);
        });
        }

        ApplicationArea.prototype.getPotentialTargets4UseCases = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "UseCase",
        sourceRelnName: "UseCases",
        sourceRelnID: "74",
        currentPage: this.UseCases.currentPage,
        entitiesPerPage:this.UseCases.entitiesPerPage,
        filter:this.UseCases.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.UseCases.queryResults = [];
        me.UseCases.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.UseCases);
        });
        }


        // Manage Aggregations:
        ApplicationArea.prototype.get_UseCases = function () {
        return this.UseCases.queryResults;
        }




        //
        // Class "ArchitectureLayer"
        //

        // Constructor
        function ArchitectureLayer (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        }

        // Inheritance
        ArchitectureLayer.prototype = Object.create(Content.prototype);
        ArchitectureLayer.prototype.constructor = ArchitectureLayer;


        //
        // Methods
        //

        ArchitectureLayer.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        ArchitectureLayer.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        ArchitectureLayer.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        ArchitectureLayer.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "ArchitecturePattern"
        //

        // Constructor
        function ArchitecturePattern (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        }

        // Inheritance
        ArchitecturePattern.prototype = Object.create(Content.prototype);
        ArchitecturePattern.prototype.constructor = ArchitecturePattern;


        //
        // Methods
        //

        ArchitecturePattern.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        ArchitecturePattern.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        ArchitecturePattern.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        ArchitecturePattern.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "BSSL"
        //

        // Constructor
        function BSSL (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        }

        // Inheritance
        BSSL.prototype = Object.create(Content.prototype);
        BSSL.prototype.constructor = BSSL;


        //
        // Methods
        //

        BSSL.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        BSSL.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        BSSL.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        BSSL.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "BodyOfKnowledge"
        //

        // Constructor
        function BodyOfKnowledge (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.IIRAs = new Relationship(98, "IIRAs", this);
        this.IISFs = new Relationship(99, "IISFs", this);
        this.BSSLs = new Relationship(100, "BSSLs", this);
        }

        // Inheritance
        BodyOfKnowledge.prototype = Object.create(Content.prototype);
        BodyOfKnowledge.prototype.constructor = BodyOfKnowledge;


        //
        // Methods
        //

        BodyOfKnowledge.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        BodyOfKnowledge.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        BodyOfKnowledge.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        BodyOfKnowledge.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "IIRAs":
        this.IIRAs.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.IIRAs.queryResults.push(target);
        }
        break;

        case "IISFs":
        this.IISFs.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.IISFs.queryResults.push(target);
        }
        break;

        case "BSSLs":
        this.BSSLs.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.BSSLs.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        BodyOfKnowledge.prototype.query_IIRAs = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "IIRAs",
        parentRelnID: "98",
        targetType: "IIRA",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.IIRAs.currentPage,
        entitiesPerPage: this.IIRAs.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IIRAs.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IIRAs, me);
        });
        }

        BodyOfKnowledge.prototype.getPotentialTargets4IIRAs = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "IIRA",
        sourceRelnName: "IIRAs",
        sourceRelnID: "98",
        currentPage: this.IIRAs.currentPage,
        entitiesPerPage:this.IIRAs.entitiesPerPage,
        filter:this.IIRAs.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IIRAs.queryResults = [];
        me.IIRAs.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IIRAs);
        });
        }

        BodyOfKnowledge.prototype.query_IISFs = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "IISFs",
        parentRelnID: "99",
        targetType: "IISF",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.IISFs.currentPage,
        entitiesPerPage: this.IISFs.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IISFs.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IISFs, me);
        });
        }

        BodyOfKnowledge.prototype.getPotentialTargets4IISFs = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "IISF",
        sourceRelnName: "IISFs",
        sourceRelnID: "99",
        currentPage: this.IISFs.currentPage,
        entitiesPerPage:this.IISFs.entitiesPerPage,
        filter:this.IISFs.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IISFs.queryResults = [];
        me.IISFs.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IISFs);
        });
        }

        BodyOfKnowledge.prototype.query_BSSLs = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "BSSLs",
        parentRelnID: "100",
        targetType: "BSSL",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.BSSLs.currentPage,
        entitiesPerPage: this.BSSLs.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.BSSLs.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.BSSLs, me);
        });
        }

        BodyOfKnowledge.prototype.getPotentialTargets4BSSLs = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "BSSL",
        sourceRelnName: "BSSLs",
        sourceRelnID: "100",
        currentPage: this.BSSLs.currentPage,
        entitiesPerPage:this.BSSLs.entitiesPerPage,
        filter:this.BSSLs.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.BSSLs.queryResults = [];
        me.BSSLs.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.BSSLs);
        });
        }


        // Manage Aggregations:
        BodyOfKnowledge.prototype.get_IIRAs = function () {
        return this.IIRAs.queryResults;
        }

        BodyOfKnowledge.prototype.get_IISFs = function () {
        return this.IISFs.queryResults;
        }

        BodyOfKnowledge.prototype.get_BSSLs = function () {
        return this.BSSLs.queryResults;
        }




        //
        // Class "Certification"
        //

        // Constructor
        function Certification (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.Date="2017-03-01 15:36:41";


        // Relationships:
        this.CertifiedFor = new Relationship(60, "CertifiedFor", this);
        this.CertifiedBy = new Relationship(61, "CertifiedBy", this);
        }

        // Inheritance
        Certification.prototype = Object.create(Content.prototype);
        Certification.prototype.constructor = Certification;


        //
        // Methods
        //

        Certification.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        Certification.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;
        this._Date = qr.Date;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        this.CertifiedFor.assocTargets = qr.CertifiedFor ? qr.CertifiedFor : [];
        this.CertifiedBy.assocTargets = qr.CertifiedBy ? qr.CertifiedBy : [];
        }


        Certification.prototype.get_Date = function () { return this._Date };
        Certification.prototype.set_Date = function (value) {
        if (this._Date===value) return;
        this._Date=value; this.changed=true; };

        Certification.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();
        propertiesOnly.Date = this.get_Date();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        propertiesOnly.CertifiedFor = this.CertifiedFor.assocTargets;
        propertiesOnly.CertifiedBy = this.CertifiedBy.assocTargets;
        return propertiesOnly;
        }


        Certification.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "CertifiedFor":
        this.CertifiedFor.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.CertifiedFor.queryResults.push(target);
        }
        break;

        case "CertifiedBy":
        this.CertifiedBy.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.CertifiedBy.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        Certification.prototype.query_CertifiedFor = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "CertifiedFor",
        parentRelnID: "60",
        targetType: "Content",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.CertifiedFor.currentPage,
        entitiesPerPage: this.CertifiedFor.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.CertifiedFor.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.CertifiedFor, me);
        });
        }

        Certification.prototype.getPotentialTargets4CertifiedFor = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Content",
        sourceRelnName: "CertifiedFor",
        sourceRelnID: "60",
        currentPage: this.CertifiedFor.currentPage,
        entitiesPerPage:this.CertifiedFor.entitiesPerPage,
        filter:this.CertifiedFor.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.CertifiedFor.queryResults = [];
        me.CertifiedFor.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.CertifiedFor);
        });
        }

        Certification.prototype.query_CertifiedBy = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "CertifiedBy",
        parentRelnID: "61",
        targetType: "User",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.CertifiedBy.currentPage,
        entitiesPerPage: this.CertifiedBy.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.CertifiedBy.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.CertifiedBy, me);
        });
        }

        Certification.prototype.getPotentialTargets4CertifiedBy = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "User",
        sourceRelnName: "CertifiedBy",
        sourceRelnID: "61",
        currentPage: this.CertifiedBy.currentPage,
        entitiesPerPage:this.CertifiedBy.entitiesPerPage,
        filter:this.CertifiedBy.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.CertifiedBy.queryResults = [];
        me.CertifiedBy.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.CertifiedBy);
        });
        }




        // Manage Associations:
        Certification.prototype.get_CertifiedFor = function () {
        return this.CertifiedFor.queryResults;
        }

        Certification.prototype.get_CertifiedBy = function () {
        return this.CertifiedBy.queryResults;
        }


        //
        // Class "HotSpot"
        //

        // Constructor
        function HotSpot (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.IndustryVerticals = new Relationship(78, "IndustryVerticals", this);
        this.UseCases = new Relationship(79, "UseCases", this);
        this.Technologies = new Relationship(80, "Technologies", this);
        this.Standards = new Relationship(81, "Standards", this);
        this.Testbeds = new Relationship(82, "Testbeds", this);
        }

        // Inheritance
        HotSpot.prototype = Object.create(Content.prototype);
        HotSpot.prototype.constructor = HotSpot;


        //
        // Methods
        //

        HotSpot.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        HotSpot.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        this.IndustryVerticals.assocTargets = qr.IndustryVerticals ? qr.IndustryVerticals : [];
        this.UseCases.assocTargets = qr.UseCases ? qr.UseCases : [];
        this.Technologies.assocTargets = qr.Technologies ? qr.Technologies : [];
        this.Standards.assocTargets = qr.Standards ? qr.Standards : [];
        this.Testbeds.assocTargets = qr.Testbeds ? qr.Testbeds : [];
        }



        HotSpot.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        propertiesOnly.IndustryVerticals = this.IndustryVerticals.assocTargets;
        propertiesOnly.UseCases = this.UseCases.assocTargets;
        propertiesOnly.Technologies = this.Technologies.assocTargets;
        propertiesOnly.Standards = this.Standards.assocTargets;
        propertiesOnly.Testbeds = this.Testbeds.assocTargets;
        return propertiesOnly;
        }


        HotSpot.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "IndustryVerticals":
        this.IndustryVerticals.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.IndustryVerticals.queryResults.push(target);
        }
        break;

        case "UseCases":
        this.UseCases.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.UseCases.queryResults.push(target);
        }
        break;

        case "Technologies":
        this.Technologies.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Technologies.queryResults.push(target);
        }
        break;

        case "Standards":
        this.Standards.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Standards.queryResults.push(target);
        }
        break;

        case "Testbeds":
        this.Testbeds.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Testbeds.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        HotSpot.prototype.query_IndustryVerticals = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "IndustryVerticals",
        parentRelnID: "78",
        targetType: "IndustryVertical",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.IndustryVerticals.currentPage,
        entitiesPerPage: this.IndustryVerticals.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustryVerticals.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustryVerticals, me);
        });
        }

        HotSpot.prototype.getPotentialTargets4IndustryVerticals = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "IndustryVertical",
        sourceRelnName: "IndustryVerticals",
        sourceRelnID: "78",
        currentPage: this.IndustryVerticals.currentPage,
        entitiesPerPage:this.IndustryVerticals.entitiesPerPage,
        filter:this.IndustryVerticals.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustryVerticals.queryResults = [];
        me.IndustryVerticals.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustryVerticals);
        });
        }

        HotSpot.prototype.query_UseCases = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "UseCases",
        parentRelnID: "79",
        targetType: "UseCase",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.UseCases.currentPage,
        entitiesPerPage: this.UseCases.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.UseCases.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.UseCases, me);
        });
        }

        HotSpot.prototype.getPotentialTargets4UseCases = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "UseCase",
        sourceRelnName: "UseCases",
        sourceRelnID: "79",
        currentPage: this.UseCases.currentPage,
        entitiesPerPage:this.UseCases.entitiesPerPage,
        filter:this.UseCases.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.UseCases.queryResults = [];
        me.UseCases.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.UseCases);
        });
        }

        HotSpot.prototype.query_Technologies = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "Technologies",
        parentRelnID: "80",
        targetType: "Technology",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Technologies.currentPage,
        entitiesPerPage: this.Technologies.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Technologies.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Technologies, me);
        });
        }

        HotSpot.prototype.getPotentialTargets4Technologies = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Technology",
        sourceRelnName: "Technologies",
        sourceRelnID: "80",
        currentPage: this.Technologies.currentPage,
        entitiesPerPage:this.Technologies.entitiesPerPage,
        filter:this.Technologies.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Technologies.queryResults = [];
        me.Technologies.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Technologies);
        });
        }

        HotSpot.prototype.query_Standards = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "Standards",
        parentRelnID: "81",
        targetType: "Standard",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Standards.currentPage,
        entitiesPerPage: this.Standards.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Standards.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Standards, me);
        });
        }

        HotSpot.prototype.getPotentialTargets4Standards = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Standard",
        sourceRelnName: "Standards",
        sourceRelnID: "81",
        currentPage: this.Standards.currentPage,
        entitiesPerPage:this.Standards.entitiesPerPage,
        filter:this.Standards.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Standards.queryResults = [];
        me.Standards.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Standards);
        });
        }

        HotSpot.prototype.query_Testbeds = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "Testbeds",
        parentRelnID: "82",
        targetType: "Testbed",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Testbeds.currentPage,
        entitiesPerPage: this.Testbeds.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Testbeds.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Testbeds, me);
        });
        }

        HotSpot.prototype.getPotentialTargets4Testbeds = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Testbed",
        sourceRelnName: "Testbeds",
        sourceRelnID: "82",
        currentPage: this.Testbeds.currentPage,
        entitiesPerPage:this.Testbeds.entitiesPerPage,
        filter:this.Testbeds.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Testbeds.queryResults = [];
        me.Testbeds.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Testbeds);
        });
        }




        // Manage Associations:
        HotSpot.prototype.get_IndustryVerticals = function () {
        return this.IndustryVerticals.queryResults;
        }

        HotSpot.prototype.get_UseCases = function () {
        return this.UseCases.queryResults;
        }

        HotSpot.prototype.get_Technologies = function () {
        return this.Technologies.queryResults;
        }

        HotSpot.prototype.get_Standards = function () {
        return this.Standards.queryResults;
        }

        HotSpot.prototype.get_Testbeds = function () {
        return this.Testbeds.queryResults;
        }


        //
        // Class "I3C"
        //

        // Constructor
        function I3C (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.IndustrySectors = new Relationship(63, "IndustrySectors", this);
        this.ApplicationAreas = new Relationship(64, "ApplicationAreas", this);
        this.HotSpots = new Relationship(65, "HotSpots", this);
        this.StandardsOrganizations = new Relationship(66, "StandardsOrganizations", this);
        this.TechnologyAreas = new Relationship(67, "TechnologyAreas", this);
        this.Testbeds = new Relationship(68, "Testbeds", this);
        }

        // Inheritance
        I3C.prototype = Object.create(Content.prototype);
        I3C.prototype.constructor = I3C;


        //
        // Methods
        //

        I3C.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        I3C.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        I3C.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        I3C.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "IndustrySectors":
        this.IndustrySectors.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.IndustrySectors.queryResults.push(target);
        }
        break;

        case "ApplicationAreas":
        this.ApplicationAreas.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ApplicationAreas.queryResults.push(target);
        }
        break;

        case "HotSpots":
        this.HotSpots.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.HotSpots.queryResults.push(target);
        }
        break;

        case "StandardsOrganizations":
        this.StandardsOrganizations.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.StandardsOrganizations.queryResults.push(target);
        }
        break;

        case "TechnologyAreas":
        this.TechnologyAreas.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.TechnologyAreas.queryResults.push(target);
        }
        break;

        case "Testbeds":
        this.Testbeds.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Testbeds.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        I3C.prototype.query_IndustrySectors = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "IndustrySectors",
        parentRelnID: "63",
        targetType: "IndustrySector",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.IndustrySectors.currentPage,
        entitiesPerPage: this.IndustrySectors.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustrySectors.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustrySectors, me);
        });
        }

        I3C.prototype.getPotentialTargets4IndustrySectors = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "IndustrySector",
        sourceRelnName: "IndustrySectors",
        sourceRelnID: "63",
        currentPage: this.IndustrySectors.currentPage,
        entitiesPerPage:this.IndustrySectors.entitiesPerPage,
        filter:this.IndustrySectors.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustrySectors.queryResults = [];
        me.IndustrySectors.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustrySectors);
        });
        }

        I3C.prototype.query_ApplicationAreas = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "ApplicationAreas",
        parentRelnID: "64",
        targetType: "ApplicationArea",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.ApplicationAreas.currentPage,
        entitiesPerPage: this.ApplicationAreas.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.ApplicationAreas.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ApplicationAreas, me);
        });
        }

        I3C.prototype.getPotentialTargets4ApplicationAreas = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "ApplicationArea",
        sourceRelnName: "ApplicationAreas",
        sourceRelnID: "64",
        currentPage: this.ApplicationAreas.currentPage,
        entitiesPerPage:this.ApplicationAreas.entitiesPerPage,
        filter:this.ApplicationAreas.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.ApplicationAreas.queryResults = [];
        me.ApplicationAreas.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ApplicationAreas);
        });
        }

        I3C.prototype.query_HotSpots = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "HotSpots",
        parentRelnID: "65",
        targetType: "HotSpot",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.HotSpots.currentPage,
        entitiesPerPage: this.HotSpots.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.HotSpots.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.HotSpots, me);
        });
        }

        I3C.prototype.getPotentialTargets4HotSpots = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "HotSpot",
        sourceRelnName: "HotSpots",
        sourceRelnID: "65",
        currentPage: this.HotSpots.currentPage,
        entitiesPerPage:this.HotSpots.entitiesPerPage,
        filter:this.HotSpots.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.HotSpots.queryResults = [];
        me.HotSpots.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.HotSpots);
        });
        }

        I3C.prototype.query_StandardsOrganizations = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "StandardsOrganizations",
        parentRelnID: "66",
        targetType: "StandardsOrganization",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.StandardsOrganizations.currentPage,
        entitiesPerPage: this.StandardsOrganizations.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.StandardsOrganizations.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.StandardsOrganizations, me);
        });
        }

        I3C.prototype.getPotentialTargets4StandardsOrganizations = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "StandardsOrganization",
        sourceRelnName: "StandardsOrganizations",
        sourceRelnID: "66",
        currentPage: this.StandardsOrganizations.currentPage,
        entitiesPerPage:this.StandardsOrganizations.entitiesPerPage,
        filter:this.StandardsOrganizations.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.StandardsOrganizations.queryResults = [];
        me.StandardsOrganizations.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.StandardsOrganizations);
        });
        }

        I3C.prototype.query_TechnologyAreas = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "TechnologyAreas",
        parentRelnID: "67",
        targetType: "TechnologyArea",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.TechnologyAreas.currentPage,
        entitiesPerPage: this.TechnologyAreas.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.TechnologyAreas.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TechnologyAreas, me);
        });
        }

        I3C.prototype.getPotentialTargets4TechnologyAreas = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "TechnologyArea",
        sourceRelnName: "TechnologyAreas",
        sourceRelnID: "67",
        currentPage: this.TechnologyAreas.currentPage,
        entitiesPerPage:this.TechnologyAreas.entitiesPerPage,
        filter:this.TechnologyAreas.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.TechnologyAreas.queryResults = [];
        me.TechnologyAreas.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TechnologyAreas);
        });
        }

        I3C.prototype.query_Testbeds = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Testbeds",
        parentRelnID: "68",
        targetType: "Testbed",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Testbeds.currentPage,
        entitiesPerPage: this.Testbeds.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Testbeds.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Testbeds, me);
        });
        }

        I3C.prototype.getPotentialTargets4Testbeds = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Testbed",
        sourceRelnName: "Testbeds",
        sourceRelnID: "68",
        currentPage: this.Testbeds.currentPage,
        entitiesPerPage:this.Testbeds.entitiesPerPage,
        filter:this.Testbeds.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Testbeds.queryResults = [];
        me.Testbeds.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Testbeds);
        });
        }


        // Manage Aggregations:
        I3C.prototype.get_IndustrySectors = function () {
        return this.IndustrySectors.queryResults;
        }

        I3C.prototype.get_ApplicationAreas = function () {
        return this.ApplicationAreas.queryResults;
        }

        I3C.prototype.get_HotSpots = function () {
        return this.HotSpots.queryResults;
        }

        I3C.prototype.get_StandardsOrganizations = function () {
        return this.StandardsOrganizations.queryResults;
        }

        I3C.prototype.get_TechnologyAreas = function () {
        return this.TechnologyAreas.queryResults;
        }

        I3C.prototype.get_Testbeds = function () {
        return this.Testbeds.queryResults;
        }




        //
        // Class "IIRA"
        //

        // Constructor
        function IIRA (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.ArchitecturePatterns = new Relationship(102, "ArchitecturePatterns", this);
        this.ArchitectureLayers = new Relationship(103, "ArchitectureLayers", this);
        }

        // Inheritance
        IIRA.prototype = Object.create(Content.prototype);
        IIRA.prototype.constructor = IIRA;


        //
        // Methods
        //

        IIRA.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        IIRA.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        IIRA.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        IIRA.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "ArchitecturePatterns":
        this.ArchitecturePatterns.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ArchitecturePatterns.queryResults.push(target);
        }
        break;

        case "ArchitectureLayers":
        this.ArchitectureLayers.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ArchitectureLayers.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        IIRA.prototype.query_ArchitecturePatterns = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "ArchitecturePatterns",
        parentRelnID: "102",
        targetType: "ArchitecturePattern",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.ArchitecturePatterns.currentPage,
        entitiesPerPage: this.ArchitecturePatterns.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.ArchitecturePatterns.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ArchitecturePatterns, me);
        });
        }

        IIRA.prototype.getPotentialTargets4ArchitecturePatterns = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "ArchitecturePattern",
        sourceRelnName: "ArchitecturePatterns",
        sourceRelnID: "102",
        currentPage: this.ArchitecturePatterns.currentPage,
        entitiesPerPage:this.ArchitecturePatterns.entitiesPerPage,
        filter:this.ArchitecturePatterns.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.ArchitecturePatterns.queryResults = [];
        me.ArchitecturePatterns.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ArchitecturePatterns);
        });
        }

        IIRA.prototype.query_ArchitectureLayers = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "ArchitectureLayers",
        parentRelnID: "103",
        targetType: "ArchitectureLayer",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.ArchitectureLayers.currentPage,
        entitiesPerPage: this.ArchitectureLayers.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.ArchitectureLayers.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ArchitectureLayers, me);
        });
        }

        IIRA.prototype.getPotentialTargets4ArchitectureLayers = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "ArchitectureLayer",
        sourceRelnName: "ArchitectureLayers",
        sourceRelnID: "103",
        currentPage: this.ArchitectureLayers.currentPage,
        entitiesPerPage:this.ArchitectureLayers.entitiesPerPage,
        filter:this.ArchitectureLayers.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.ArchitectureLayers.queryResults = [];
        me.ArchitectureLayers.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.ArchitectureLayers);
        });
        }


        // Manage Aggregations:
        IIRA.prototype.get_ArchitecturePatterns = function () {
        return this.ArchitecturePatterns.queryResults;
        }

        IIRA.prototype.get_ArchitectureLayers = function () {
        return this.ArchitectureLayers.queryResults;
        }




        //
        // Class "IISF"
        //

        // Constructor
        function IISF (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        }

        // Inheritance
        IISF.prototype = Object.create(Content.prototype);
        IISF.prototype.constructor = IISF;


        //
        // Methods
        //

        IISF.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        IISF.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        IISF.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        IISF.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "IndustrySector"
        //

        // Constructor
        function IndustrySector (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.ImageURL='text';


        // Relationships:
        this.IndustryVerticals = new Relationship(71, "IndustryVerticals", this);
        }

        // Inheritance
        IndustrySector.prototype = Object.create(Content.prototype);
        IndustrySector.prototype.constructor = IndustrySector;


        //
        // Methods
        //

        IndustrySector.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        IndustrySector.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;
        this._ImageURL = qr.ImageURL;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }


        IndustrySector.prototype.get_ImageURL = function () { return this._ImageURL };
        IndustrySector.prototype.set_ImageURL = function (value) {
        if (this._ImageURL===value) return;
        this._ImageURL=value; this.changed=true; };

        IndustrySector.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();
        propertiesOnly.ImageURL = this.get_ImageURL();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        IndustrySector.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "IndustryVerticals":
        this.IndustryVerticals.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.IndustryVerticals.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        IndustrySector.prototype.query_IndustryVerticals = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "IndustryVerticals",
        parentRelnID: "71",
        targetType: "IndustryVertical",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.IndustryVerticals.currentPage,
        entitiesPerPage: this.IndustryVerticals.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustryVerticals.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustryVerticals, me);
        });
        }

        IndustrySector.prototype.getPotentialTargets4IndustryVerticals = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "IndustryVertical",
        sourceRelnName: "IndustryVerticals",
        sourceRelnID: "71",
        currentPage: this.IndustryVerticals.currentPage,
        entitiesPerPage:this.IndustryVerticals.entitiesPerPage,
        filter:this.IndustryVerticals.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.IndustryVerticals.queryResults = [];
        me.IndustryVerticals.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.IndustryVerticals);
        });
        }


        // Manage Aggregations:
        IndustrySector.prototype.get_IndustryVerticals = function () {
        return this.IndustryVerticals.queryResults;
        }




        //
        // Class "IndustryVertical"
        //

        // Constructor
        function IndustryVertical (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        }

        // Inheritance
        IndustryVertical.prototype = Object.create(Content.prototype);
        IndustryVertical.prototype.constructor = IndustryVertical;


        //
        // Methods
        //

        IndustryVertical.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        IndustryVertical.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        IndustryVertical.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        IndustryVertical.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "Member"
        //

        // Constructor
        function Member (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.CompanyName='text';

        // Enumerations:
        this.Category="";

        }

        // Inheritance
        Member.prototype = Object.create(Content.prototype);
        Member.prototype.constructor = Member;

        // Definitions for Enumerations
        Member.prototype.enumDef_Category = ["FoundingMember", "ContributingMember", "LargeIndustryMember", "SmallIndustryMember", "NonprofitOrAcademiaMember", "GovernmentMember"];

        //
        // Methods
        //

        Member.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        Member.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;
        this._CompanyName = qr.CompanyName;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }


        Member.prototype.get_CompanyName = function () { return this._CompanyName };
        Member.prototype.set_CompanyName = function (value) {
        if (this._CompanyName===value) return;
        this._CompanyName=value; this.changed=true; };

        Member.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();
        propertiesOnly.CompanyName = this.get_CompanyName();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        Member.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "Organization"
        //

        // Constructor
        function Organization (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.Users = new Relationship(28, "Users", this);
        this.WorkGroups = new Relationship(29, "WorkGroups", this);
        this.Roles = new Relationship(30, "Roles", this);
        this.Members = new Relationship(31, "Members", this);
        }

        // Inheritance
        Organization.prototype = Object.create(Content.prototype);
        Organization.prototype.constructor = Organization;


        //
        // Methods
        //

        Organization.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        Organization.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        Organization.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        Organization.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "Users":
        this.Users.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Users.queryResults.push(target);
        }
        break;

        case "WorkGroups":
        this.WorkGroups.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WorkGroups.queryResults.push(target);
        }
        break;

        case "Roles":
        this.Roles.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Roles.queryResults.push(target);
        }
        break;

        case "Members":
        this.Members.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Members.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        Organization.prototype.query_Users = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Users",
        parentRelnID: "28",
        targetType: "User",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Users.currentPage,
        entitiesPerPage: this.Users.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Users.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Users, me);
        });
        }

        Organization.prototype.getPotentialTargets4Users = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "User",
        sourceRelnName: "Users",
        sourceRelnID: "28",
        currentPage: this.Users.currentPage,
        entitiesPerPage:this.Users.entitiesPerPage,
        filter:this.Users.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Users.queryResults = [];
        me.Users.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Users);
        });
        }

        Organization.prototype.query_WorkGroups = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "WorkGroups",
        parentRelnID: "29",
        targetType: "WorkGroup",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.WorkGroups.currentPage,
        entitiesPerPage: this.WorkGroups.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.WorkGroups.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.WorkGroups, me);
        });
        }

        Organization.prototype.getPotentialTargets4WorkGroups = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "WorkGroup",
        sourceRelnName: "WorkGroups",
        sourceRelnID: "29",
        currentPage: this.WorkGroups.currentPage,
        entitiesPerPage:this.WorkGroups.entitiesPerPage,
        filter:this.WorkGroups.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.WorkGroups.queryResults = [];
        me.WorkGroups.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.WorkGroups);
        });
        }

        Organization.prototype.query_Roles = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Roles",
        parentRelnID: "30",
        targetType: "Role",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Roles.currentPage,
        entitiesPerPage: this.Roles.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Roles.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Roles, me);
        });
        }

        Organization.prototype.getPotentialTargets4Roles = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Role",
        sourceRelnName: "Roles",
        sourceRelnID: "30",
        currentPage: this.Roles.currentPage,
        entitiesPerPage:this.Roles.entitiesPerPage,
        filter:this.Roles.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Roles.queryResults = [];
        me.Roles.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Roles);
        });
        }

        Organization.prototype.query_Members = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Members",
        parentRelnID: "31",
        targetType: "Member",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Members.currentPage,
        entitiesPerPage: this.Members.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Members.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Members, me);
        });
        }

        Organization.prototype.getPotentialTargets4Members = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Member",
        sourceRelnName: "Members",
        sourceRelnID: "31",
        currentPage: this.Members.currentPage,
        entitiesPerPage:this.Members.entitiesPerPage,
        filter:this.Members.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Members.queryResults = [];
        me.Members.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Members);
        });
        }


        // Manage Aggregations:
        Organization.prototype.get_Users = function () {
        return this.Users.queryResults;
        }

        Organization.prototype.get_WorkGroups = function () {
        return this.WorkGroups.queryResults;
        }

        Organization.prototype.get_Roles = function () {
        return this.Roles.queryResults;
        }

        Organization.prototype.get_Members = function () {
        return this.Members.queryResults;
        }




        //
        // Class "Standard"
        //

        // Constructor
        function Standard (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.Technologies='text';


        }

        // Inheritance
        Standard.prototype = Object.create(Content.prototype);
        Standard.prototype.constructor = Standard;


        //
        // Methods
        //

        Standard.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        Standard.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;
        this._Technologies = qr.Technologies;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }


        Standard.prototype.get_Technologies = function () { return this._Technologies };
        Standard.prototype.set_Technologies = function (value) {
        if (this._Technologies===value) return;
        this._Technologies=value; this.changed=true; };

        Standard.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();
        propertiesOnly.Technologies = this.get_Technologies();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        Standard.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "StandardsOrganization"
        //

        // Constructor
        function StandardsOrganization (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);



        // Enumerations:
        this.LiasonStatus="";

        // Relationships:
        this.Standards = new Relationship(91, "Standards", this);
        }

        // Inheritance
        StandardsOrganization.prototype = Object.create(Content.prototype);
        StandardsOrganization.prototype.constructor = StandardsOrganization;

        // Definitions for Enumerations
        StandardsOrganization.prototype.enumDef_LiasonStatus = ["None", "Considered", "WIP", "Confirmed"];

        //
        // Methods
        //

        StandardsOrganization.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        StandardsOrganization.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        StandardsOrganization.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        StandardsOrganization.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "Standards":
        this.Standards.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Standards.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        StandardsOrganization.prototype.query_Standards = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Standards",
        parentRelnID: "91",
        targetType: "Standard",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Standards.currentPage,
        entitiesPerPage: this.Standards.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Standards.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Standards, me);
        });
        }

        StandardsOrganization.prototype.getPotentialTargets4Standards = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Standard",
        sourceRelnName: "Standards",
        sourceRelnID: "91",
        currentPage: this.Standards.currentPage,
        entitiesPerPage:this.Standards.entitiesPerPage,
        filter:this.Standards.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Standards.queryResults = [];
        me.Standards.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Standards);
        });
        }


        // Manage Aggregations:
        StandardsOrganization.prototype.get_Standards = function () {
        return this.Standards.queryResults;
        }




        //
        // Class "TaskGroup"
        //

        // Constructor
        function TaskGroup (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        }

        // Inheritance
        TaskGroup.prototype = Object.create(Content.prototype);
        TaskGroup.prototype.constructor = TaskGroup;


        //
        // Methods
        //

        TaskGroup.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        TaskGroup.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        TaskGroup.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        TaskGroup.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "Technology"
        //

        // Constructor
        function Technology (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        }

        // Inheritance
        Technology.prototype = Object.create(Content.prototype);
        Technology.prototype.constructor = Technology;


        //
        // Methods
        //

        Technology.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        Technology.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        Technology.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        Technology.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "TechnologyArea"
        //

        // Constructor
        function TechnologyArea (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.Technologies = new Relationship(95, "Technologies", this);
        }

        // Inheritance
        TechnologyArea.prototype = Object.create(Content.prototype);
        TechnologyArea.prototype.constructor = TechnologyArea;


        //
        // Methods
        //

        TechnologyArea.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        TechnologyArea.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        TechnologyArea.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        TechnologyArea.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "Technologies":
        this.Technologies.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Technologies.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        TechnologyArea.prototype.query_Technologies = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Technologies",
        parentRelnID: "95",
        targetType: "Technology",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Technologies.currentPage,
        entitiesPerPage: this.Technologies.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Technologies.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Technologies, me);
        });
        }

        TechnologyArea.prototype.getPotentialTargets4Technologies = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Technology",
        sourceRelnName: "Technologies",
        sourceRelnID: "95",
        currentPage: this.Technologies.currentPage,
        entitiesPerPage:this.Technologies.entitiesPerPage,
        filter:this.Technologies.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Technologies.queryResults = [];
        me.Technologies.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Technologies);
        });
        }


        // Manage Aggregations:
        TechnologyArea.prototype.get_Technologies = function () {
        return this.Technologies.queryResults;
        }




        //
        // Class "UseCase"
        //

        // Constructor
        function UseCase (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.KPIs='text';


        }

        // Inheritance
        UseCase.prototype = Object.create(Content.prototype);
        UseCase.prototype.constructor = UseCase;


        //
        // Methods
        //

        UseCase.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        UseCase.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;
        this._KPIs = qr.KPIs;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }


        UseCase.prototype.get_KPIs = function () { return this._KPIs };
        UseCase.prototype.set_KPIs = function (value) {
        if (this._KPIs===value) return;
        this._KPIs=value; this.changed=true; };

        UseCase.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();
        propertiesOnly.KPIs = this.get_KPIs();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        UseCase.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }








        //
        // Class "User"
        //

        // Constructor
        function User (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.Certifications = new Relationship(33, "Certifications", this);
        this.Accounts = new Relationship(34, "Accounts", this);
        this.Roles = new Relationship(35, "Roles", this);
        this.WGMember = new Relationship(36, "WGMember", this);
        this.WGLead = new Relationship(37, "WGLead", this);
        this.TGMember = new Relationship(38, "TGMember", this);
        this.TGLead = new Relationship(39, "TGLead", this);
        }

        // Inheritance
        User.prototype = Object.create(Content.prototype);
        User.prototype.constructor = User;


        //
        // Methods
        //

        User.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        User.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        this.Roles.assocTargets = qr.Roles ? qr.Roles : [];
        this.WGMember.assocTargets = qr.WGMember ? qr.WGMember : [];
        this.WGLead.assocTargets = qr.WGLead ? qr.WGLead : [];
        this.TGMember.assocTargets = qr.TGMember ? qr.TGMember : [];
        this.TGLead.assocTargets = qr.TGLead ? qr.TGLead : [];
        }



        User.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        propertiesOnly.Roles = this.Roles.assocTargets;
        propertiesOnly.WGMember = this.WGMember.assocTargets;
        propertiesOnly.WGLead = this.WGLead.assocTargets;
        propertiesOnly.TGMember = this.TGMember.assocTargets;
        propertiesOnly.TGLead = this.TGLead.assocTargets;
        return propertiesOnly;
        }


        User.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "Certifications":
        this.Certifications.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Certifications.queryResults.push(target);
        }
        break;

        case "Accounts":
        this.Accounts.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Accounts.queryResults.push(target);
        }
        break;

        case "Roles":
        this.Roles.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Roles.queryResults.push(target);
        }
        break;

        case "WGMember":
        this.WGMember.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WGMember.queryResults.push(target);
        }
        break;

        case "WGLead":
        this.WGLead.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WGLead.queryResults.push(target);
        }
        break;

        case "TGMember":
        this.TGMember.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.TGMember.queryResults.push(target);
        }
        break;

        case "TGLead":
        this.TGLead.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.TGLead.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        User.prototype.query_Certifications = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Certifications",
        parentRelnID: "33",
        targetType: "Certification",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Certifications.currentPage,
        entitiesPerPage: this.Certifications.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Certifications.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Certifications, me);
        });
        }

        User.prototype.getPotentialTargets4Certifications = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Certification",
        sourceRelnName: "Certifications",
        sourceRelnID: "33",
        currentPage: this.Certifications.currentPage,
        entitiesPerPage:this.Certifications.entitiesPerPage,
        filter:this.Certifications.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Certifications.queryResults = [];
        me.Certifications.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Certifications);
        });
        }

        User.prototype.query_Accounts = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Accounts",
        parentRelnID: "34",
        targetType: "Account",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Accounts.currentPage,
        entitiesPerPage: this.Accounts.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Accounts.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Accounts, me);
        });
        }

        User.prototype.getPotentialTargets4Accounts = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Account",
        sourceRelnName: "Accounts",
        sourceRelnID: "34",
        currentPage: this.Accounts.currentPage,
        entitiesPerPage:this.Accounts.entitiesPerPage,
        filter:this.Accounts.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Accounts.queryResults = [];
        me.Accounts.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Accounts);
        });
        }

        User.prototype.query_Roles = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "Roles",
        parentRelnID: "35",
        targetType: "Role",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Roles.currentPage,
        entitiesPerPage: this.Roles.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Roles.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Roles, me);
        });
        }

        User.prototype.getPotentialTargets4Roles = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Role",
        sourceRelnName: "Roles",
        sourceRelnID: "35",
        currentPage: this.Roles.currentPage,
        entitiesPerPage:this.Roles.entitiesPerPage,
        filter:this.Roles.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Roles.queryResults = [];
        me.Roles.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Roles);
        });
        }

        User.prototype.query_WGMember = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "WGMember",
        parentRelnID: "36",
        targetType: "WorkGroup",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.WGMember.currentPage,
        entitiesPerPage: this.WGMember.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.WGMember.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.WGMember, me);
        });
        }

        User.prototype.getPotentialTargets4WGMember = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "WorkGroup",
        sourceRelnName: "WGMember",
        sourceRelnID: "36",
        currentPage: this.WGMember.currentPage,
        entitiesPerPage:this.WGMember.entitiesPerPage,
        filter:this.WGMember.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.WGMember.queryResults = [];
        me.WGMember.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.WGMember);
        });
        }

        User.prototype.query_WGLead = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "WGLead",
        parentRelnID: "37",
        targetType: "WorkGroup",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.WGLead.currentPage,
        entitiesPerPage: this.WGLead.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.WGLead.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.WGLead, me);
        });
        }

        User.prototype.getPotentialTargets4WGLead = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "WorkGroup",
        sourceRelnName: "WGLead",
        sourceRelnID: "37",
        currentPage: this.WGLead.currentPage,
        entitiesPerPage:this.WGLead.entitiesPerPage,
        filter:this.WGLead.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.WGLead.queryResults = [];
        me.WGLead.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.WGLead);
        });
        }

        User.prototype.query_TGMember = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "TGMember",
        parentRelnID: "38",
        targetType: "TaskGroup",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.TGMember.currentPage,
        entitiesPerPage: this.TGMember.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.TGMember.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TGMember, me);
        });
        }

        User.prototype.getPotentialTargets4TGMember = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "TaskGroup",
        sourceRelnName: "TGMember",
        sourceRelnID: "38",
        currentPage: this.TGMember.currentPage,
        entitiesPerPage:this.TGMember.entitiesPerPage,
        filter:this.TGMember.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.TGMember.queryResults = [];
        me.TGMember.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TGMember);
        });
        }

        User.prototype.query_TGLead = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "TGLead",
        parentRelnID: "39",
        targetType: "TaskGroup",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.TGLead.currentPage,
        entitiesPerPage: this.TGLead.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.TGLead.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TGLead, me);
        });
        }

        User.prototype.getPotentialTargets4TGLead = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "TaskGroup",
        sourceRelnName: "TGLead",
        sourceRelnID: "39",
        currentPage: this.TGLead.currentPage,
        entitiesPerPage:this.TGLead.entitiesPerPage,
        filter:this.TGLead.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.TGLead.queryResults = [];
        me.TGLead.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TGLead);
        });
        }


        // Manage Aggregations:
        User.prototype.get_Certifications = function () {
        return this.Certifications.queryResults;
        }

        User.prototype.get_Accounts = function () {
        return this.Accounts.queryResults;
        }


        // Manage Associations:
        User.prototype.get_Roles = function () {
        return this.Roles.queryResults;
        }

        User.prototype.get_WGMember = function () {
        return this.WGMember.queryResults;
        }

        User.prototype.get_WGLead = function () {
        return this.WGLead.queryResults;
        }

        User.prototype.get_TGMember = function () {
        return this.TGMember.queryResults;
        }

        User.prototype.get_TGLead = function () {
        return this.TGLead.queryResults;
        }


        //
        // Class "WorkGroup"
        //

        // Constructor
        function WorkGroup (type, parent, id, isEmptyShell) {
        // Initialize base class
        Content.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.TaskGroups = new Relationship(56, "TaskGroups", this);
        }

        // Inheritance
        WorkGroup.prototype = Object.create(Content.prototype);
        WorkGroup.prototype.constructor = WorkGroup;


        //
        // Methods
        //

        WorkGroup.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        WorkGroup.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;

        this.ReadAccess.assocTargets = qr.ReadAccess ? qr.ReadAccess : [];
        this.WriteAccess.assocTargets = qr.WriteAccess ? qr.WriteAccess : [];
        }



        WorkGroup.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();

        propertiesOnly.ReadAccess = this.ReadAccess.assocTargets;
        propertiesOnly.WriteAccess = this.WriteAccess.assocTargets;
        return propertiesOnly;
        }


        WorkGroup.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        case "ReadAccess":
        this.ReadAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.ReadAccess.queryResults.push(target);
        }
        break;

        case "WriteAccess":
        this.WriteAccess.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.WriteAccess.queryResults.push(target);
        }
        break;

        case "TaskGroups":
        this.TaskGroups.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.TaskGroups.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        WorkGroup.prototype.query_TaskGroups = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "TaskGroups",
        parentRelnID: "56",
        targetType: "TaskGroup",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.TaskGroups.currentPage,
        entitiesPerPage: this.TaskGroups.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.TaskGroups.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TaskGroups, me);
        });
        }

        WorkGroup.prototype.getPotentialTargets4TaskGroups = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "TaskGroup",
        sourceRelnName: "TaskGroups",
        sourceRelnID: "56",
        currentPage: this.TaskGroups.currentPage,
        entitiesPerPage:this.TaskGroups.entitiesPerPage,
        filter:this.TaskGroups.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.TaskGroups.queryResults = [];
        me.TaskGroups.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.TaskGroups);
        });
        }


        // Manage Aggregations:
        WorkGroup.prototype.get_TaskGroups = function () {
        return this.TaskGroups.queryResults;
        }




        //
        // Class "IIC"
        //

        // Constructor
        function IIC (type, parent, id, isEmptyShell) {
        // Initialize base class

        Base.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.Organizations = new Relationship(108, "Organizations", this);
        this.I3Cs = new Relationship(109, "I3Cs", this);
        this.BodyOfKnowledges = new Relationship(110, "BodyOfKnowledges", this);
        this.Overview = new Relationship(111, "Overview", this);
        }

        // Inheritance
        IIC.prototype = Object.create(Base.prototype);
        IIC.prototype.constructor = IIC;


        //
        // Methods
        //

        IIC.prototype.getShorthand = function (qr) {
        var res = "undefined";

        return res;
        }

        IIC.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;

        }



        IIC.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        return propertiesOnly;
        }


        IIC.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Organizations":
        this.Organizations.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Organizations.queryResults.push(target);
        }
        break;

        case "I3Cs":
        this.I3Cs.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.I3Cs.queryResults.push(target);
        }
        break;

        case "BodyOfKnowledges":
        this.BodyOfKnowledges.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.BodyOfKnowledges.queryResults.push(target);
        }
        break;

        case "Overview":
        this.Overview.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Overview.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        IIC.prototype.query_Organizations = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Organizations",
        parentRelnID: "108",
        targetType: "Organization",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Organizations.currentPage,
        entitiesPerPage: this.Organizations.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Organizations.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Organizations, me);
        });
        }

        IIC.prototype.getPotentialTargets4Organizations = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Organization",
        sourceRelnName: "Organizations",
        sourceRelnID: "108",
        currentPage: this.Organizations.currentPage,
        entitiesPerPage:this.Organizations.entitiesPerPage,
        filter:this.Organizations.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Organizations.queryResults = [];
        me.Organizations.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Organizations);
        });
        }

        IIC.prototype.query_I3Cs = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "I3Cs",
        parentRelnID: "109",
        targetType: "I3C",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.I3Cs.currentPage,
        entitiesPerPage: this.I3Cs.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.I3Cs.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.I3Cs, me);
        });
        }

        IIC.prototype.getPotentialTargets4I3Cs = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "I3C",
        sourceRelnName: "I3Cs",
        sourceRelnID: "109",
        currentPage: this.I3Cs.currentPage,
        entitiesPerPage:this.I3Cs.entitiesPerPage,
        filter:this.I3Cs.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.I3Cs.queryResults = [];
        me.I3Cs.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.I3Cs);
        });
        }

        IIC.prototype.query_BodyOfKnowledges = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "BodyOfKnowledges",
        parentRelnID: "110",
        targetType: "BodyOfKnowledge",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.BodyOfKnowledges.currentPage,
        entitiesPerPage: this.BodyOfKnowledges.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.BodyOfKnowledges.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.BodyOfKnowledges, me);
        });
        }

        IIC.prototype.getPotentialTargets4BodyOfKnowledges = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "BodyOfKnowledge",
        sourceRelnName: "BodyOfKnowledges",
        sourceRelnID: "110",
        currentPage: this.BodyOfKnowledges.currentPage,
        entitiesPerPage:this.BodyOfKnowledges.entitiesPerPage,
        filter:this.BodyOfKnowledges.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.BodyOfKnowledges.queryResults = [];
        me.BodyOfKnowledges.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.BodyOfKnowledges);
        });
        }

        IIC.prototype.query_Overview = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Overview",
        parentRelnID: "111",
        targetType: "Paragraph",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Overview.currentPage,
        entitiesPerPage: this.Overview.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Overview.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Overview, me);
        });
        }

        IIC.prototype.getPotentialTargets4Overview = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Paragraph",
        sourceRelnName: "Overview",
        sourceRelnID: "111",
        currentPage: this.Overview.currentPage,
        entitiesPerPage:this.Overview.entitiesPerPage,
        filter:this.Overview.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Overview.queryResults = [];
        me.Overview.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Overview);
        });
        }


        // Manage Aggregations:
        IIC.prototype.get_Organizations = function () {
        return this.Organizations.queryResults;
        }

        IIC.prototype.get_I3Cs = function () {
        return this.I3Cs.queryResults;
        }

        IIC.prototype.get_BodyOfKnowledges = function () {
        return this.BodyOfKnowledges.queryResults;
        }

        IIC.prototype.get_Overview = function () {
        return this.Overview.queryResults;
        }




        //
        // Class "Image"
        //

        // Constructor
        function Image (type, parent, id, isEmptyShell) {
        // Initialize base class

        Base.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.ImageURL='text';
        this.Caption='text';
        this.AltText='text';
        this.Width='text';
        this.Height='text';


        // Relationships:
        this.Map = new Relationship(9, "Map", this);
        }

        // Inheritance
        Image.prototype = Object.create(Base.prototype);
        Image.prototype.constructor = Image;


        //
        // Methods
        //

        Image.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._ImageURL;
        return res;
        }

        Image.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._ImageURL = qr.ImageURL;
        this._Caption = qr.Caption;
        this._AltText = qr.AltText;
        this._Width = qr.Width;
        this._Height = qr.Height;

        }


        Image.prototype.get_ImageURL = function () { return this._ImageURL };
        Image.prototype.set_ImageURL = function (value) {
        if (this._ImageURL===value) return;
        this._ImageURL=value; this.changed=true; };
        Image.prototype.get_Caption = function () { return this._Caption };
        Image.prototype.set_Caption = function (value) {
        if (this._Caption===value) return;
        this._Caption=value; this.changed=true; };
        Image.prototype.get_AltText = function () { return this._AltText };
        Image.prototype.set_AltText = function (value) {
        if (this._AltText===value) return;
        this._AltText=value; this.changed=true; };
        Image.prototype.get_Width = function () { return this._Width };
        Image.prototype.set_Width = function (value) {
        if (this._Width===value) return;
        this._Width=value; this.changed=true; };
        Image.prototype.get_Height = function () { return this._Height };
        Image.prototype.set_Height = function (value) {
        if (this._Height===value) return;
        this._Height=value; this.changed=true; };

        Image.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.ImageURL = this.get_ImageURL();
        propertiesOnly.Caption = this.get_Caption();
        propertiesOnly.AltText = this.get_AltText();
        propertiesOnly.Width = this.get_Width();
        propertiesOnly.Height = this.get_Height();

        return propertiesOnly;
        }


        Image.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Map":
        this.Map.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Map.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        Image.prototype.query_Map = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Map",
        parentRelnID: "9",
        targetType: "ImageArea",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Map.currentPage,
        entitiesPerPage: this.Map.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Map.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Map, me);
        });
        }

        Image.prototype.getPotentialTargets4Map = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "ImageArea",
        sourceRelnName: "Map",
        sourceRelnID: "9",
        currentPage: this.Map.currentPage,
        entitiesPerPage:this.Map.entitiesPerPage,
        filter:this.Map.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Map.queryResults = [];
        me.Map.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Map);
        });
        }


        // Manage Aggregations:
        Image.prototype.get_Map = function () {
        return this.Map.queryResults;
        }




        //
        // Class "ImageArea"
        //

        // Constructor
        function ImageArea (type, parent, id, isEmptyShell) {
        // Initialize base class

        Base.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.Coords='text';
        this.Alt='text';
        this.HRef='text';

        // Enumerations:
        this.Shape="";

        // Relationships:
        this.Target = new Relationship(17, "Target", this);
        }

        // Inheritance
        ImageArea.prototype = Object.create(Base.prototype);
        ImageArea.prototype.constructor = ImageArea;

        // Definitions for Enumerations
        ImageArea.prototype.enumDef_Shape = ["Rect", "Circle"];

        //
        // Methods
        //

        ImageArea.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Coords;
        return res;
        }

        ImageArea.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Coords = qr.Coords;
        this._Alt = qr.Alt;
        this._HRef = qr.HRef;

        this.Target.assocTargets = qr.Target ? qr.Target : [];
        }


        ImageArea.prototype.get_Coords = function () { return this._Coords };
        ImageArea.prototype.set_Coords = function (value) {
        if (this._Coords===value) return;
        this._Coords=value; this.changed=true; };
        ImageArea.prototype.get_Alt = function () { return this._Alt };
        ImageArea.prototype.set_Alt = function (value) {
        if (this._Alt===value) return;
        this._Alt=value; this.changed=true; };
        ImageArea.prototype.get_HRef = function () { return this._HRef };
        ImageArea.prototype.set_HRef = function (value) {
        if (this._HRef===value) return;
        this._HRef=value; this.changed=true; };

        ImageArea.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Coords = this.get_Coords();
        propertiesOnly.Alt = this.get_Alt();
        propertiesOnly.HRef = this.get_HRef();

        propertiesOnly.Target = this.Target.assocTargets;
        return propertiesOnly;
        }


        ImageArea.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Target":
        this.Target.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Target.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        ImageArea.prototype.query_Target = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "Target",
        parentRelnID: "17",
        targetType: "Content",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Target.currentPage,
        entitiesPerPage: this.Target.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Target.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Target, me);
        });
        }

        ImageArea.prototype.getPotentialTargets4Target = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Content",
        sourceRelnName: "Target",
        sourceRelnID: "17",
        currentPage: this.Target.currentPage,
        entitiesPerPage:this.Target.entitiesPerPage,
        filter:this.Target.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Target.queryResults = [];
        me.Target.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Target);
        });
        }




        // Manage Associations:
        ImageArea.prototype.get_Target = function () {
        return this.Target.queryResults;
        }


        //
        // Class "Paragraph"
        //

        // Constructor
        function Paragraph (type, parent, id, isEmptyShell) {
        // Initialize base class

        Base.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.Heading='text';
        this.Content='text';


        // Relationships:
        this.Images = new Relationship(26, "Images", this);
        }

        // Inheritance
        Paragraph.prototype = Object.create(Base.prototype);
        Paragraph.prototype.constructor = Paragraph;


        //
        // Methods
        //

        Paragraph.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Heading;
        return res;
        }

        Paragraph.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Heading = qr.Heading;
        this._Content = qr.Content;

        }


        Paragraph.prototype.get_Heading = function () { return this._Heading };
        Paragraph.prototype.set_Heading = function (value) {
        if (this._Heading===value) return;
        this._Heading=value; this.changed=true; };
        Paragraph.prototype.get_Content = function () { return this._Content };
        Paragraph.prototype.set_Content = function (value) {
        if (this._Content===value) return;
        this._Content=value; this.changed=true; };

        Paragraph.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Heading = this.get_Heading();
        propertiesOnly.Content = this.get_Content();

        return propertiesOnly;
        }


        Paragraph.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Images":
        this.Images.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Images.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        Paragraph.prototype.query_Images = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AggregationQuery",
        parentRelnName: "Images",
        parentRelnID: "26",
        targetType: "Image",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Images.currentPage,
        entitiesPerPage: this.Images.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Images.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Images, me);
        });
        }

        Paragraph.prototype.getPotentialTargets4Images = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Image",
        sourceRelnName: "Images",
        sourceRelnID: "26",
        currentPage: this.Images.currentPage,
        entitiesPerPage:this.Images.entitiesPerPage,
        filter:this.Images.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Images.queryResults = [];
        me.Images.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Images);
        });
        }


        // Manage Aggregations:
        Paragraph.prototype.get_Images = function () {
        return this.Images.queryResults;
        }




        //
        // Class "Role"
        //

        // Constructor
        function Role (type, parent, id, isEmptyShell) {
        // Initialize base class

        Base.call(this, type, parent, id, isEmptyShell);


        // Properties:
        this.Name='text';
        this.Description='text';


        }

        // Inheritance
        Role.prototype = Object.create(Base.prototype);
        Role.prototype.constructor = Role;


        //
        // Methods
        //

        Role.prototype.getShorthand = function (qr) {
        var res = "undefined";
        res = this._Name;
        return res;
        }

        Role.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;
        this._Name = qr.Name;
        this._Description = qr.Description;

        }


        Role.prototype.get_Name = function () { return this._Name };
        Role.prototype.set_Name = function (value) {
        if (this._Name===value) return;
        this._Name=value; this.changed=true; };
        Role.prototype.get_Description = function () { return this._Description };
        Role.prototype.set_Description = function (value) {
        if (this._Description===value) return;
        this._Description=value; this.changed=true; };

        Role.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly._id = this.id;
        propertiesOnly.type = this.type;
        if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
        }

        propertiesOnly.Name = this.get_Name();
        propertiesOnly.Description = this.get_Description();

        return propertiesOnly;
        }









        //
        // Class "Testbed"
        //

        // Constructor
        function Testbed (type, parent, id, isEmptyShell) {
        // Initialize base class

        Base.call(this, type, parent, id, isEmptyShell);




        // Relationships:
        this.Sponsor = new Relationship(84, "Sponsor", this);
        }

        // Inheritance
        Testbed.prototype = Object.create(Base.prototype);
        Testbed.prototype.constructor = Testbed;


        //
        // Methods
        //

        Testbed.prototype.getShorthand = function (qr) {
        var res = "undefined";

        return res;
        }

        Testbed.prototype.updatePropertiesWithQueryResults = function (qr) {
        this.isEmptyShell = false;
        this._id = qr._id;

        this.Sponsor.assocTargets = qr.Sponsor ? qr.Sponsor : [];
        }



        Testbed.prototype.propertiesOnly = function () {
        var propertiesOnly = {};
        propertiesOnly.Sponsor = this.Sponsor.assocTargets;
        return propertiesOnly;
        }


        Testbed.prototype.updateRelationshipWithQueryResults = function (qr) {
        relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
        switch(relnName) {

        case "Sponsor":
        this.Sponsor.queryResultsCount=qr.queryResultsCount;
        for (i in qr.queryResult) {
        target = getIICAdmin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
        this.Sponsor.queryResults.push(target);
        }
        break;

        default: throw "Invalid relationship name: "+relnName;
        }
        }



        Testbed.prototype.query_Sponsor = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        domain: "IIC",
        command: "AssociationQuery",
        parentRelnName: "Sponsor",
        parentRelnID: "84",
        targetType: "Member",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.Sponsor.currentPage,
        entitiesPerPage: this.Sponsor.entitiesPerPage
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Sponsor.queryResults = [];
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Sponsor, me);
        });
        }

        Testbed.prototype.getPotentialTargets4Sponsor = function (callback) {
        var reqData = { commandList: [] };
        reqData.commandList.push ({
        queryID: 1,
        domain: "IIC",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "Member",
        sourceRelnName: "Sponsor",
        sourceRelnID: "84",
        currentPage: this.Sponsor.currentPage,
        entitiesPerPage:this.Sponsor.entitiesPerPage,
        filter:this.Sponsor.filter
        });
        var me = this;
        getIICAdmin().processCRUDcommands(reqData, function(res) {
        me.Sponsor.queryResults = [];
        me.Sponsor.queryResultsCount = res.resultList[0].queryResultsCount;
        getIICAdmin().updateEntityCacheWithQueryResults (res);
        callback (me.Sponsor);
        });
        }




        // Manage Associations:
        Testbed.prototype.get_Sponsor = function () {
        return this.Sponsor.queryResults;
        }




