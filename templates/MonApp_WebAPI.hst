{{Domain*}}// ***************************************************************************************************** //
// MonApp Web API for Domain: {{js:this.name;/}}
// Generated by HeadStart::MonApp, version: v0.1
// Generated on: {{js:(new Date()).toLocaleString();/}}
// ***************************************************************************************************** //

//
// Global helpers
//

$active = { initCalls: [], onSave: [], initialized:false };
whenReady = function (fct) {
    if ($active.initialized) fct.call();
    else $active.initCalls.push(fct);
}
onSave = function (fct) {
    $active.onSave.push(fct);
}
saveHandler = function () {
    $active.onSave.forEach(function (fct) {
        fct.call();
    });
    get{{js:this.getDomain().name;/}}Admin().save("{{js:this.getDomain().name;/}}");
}
deleteHandler = function () {
    var callbacks = [
        {
            close: true,
            label: "Delete",
            callback: function () {
                get{{js:this.getDomain().name;/}}Admin().delete("{{js:this.getDomain().name;/}}");
            }
        },
        {
            close: true,
            label: "Cancel"
        }
    ];
    createModal("Confirmation", "Do you really want to delete this entity?", "warning", callbacks);
}

$(window).unload(function() {
    saveHandler("{{js:this.getDomain().name;/}}");
});

// Handler for Nav elements from _appLayout.hbs
$(document).ready(function () {
    $("#NavButtonSaveA").on("click", saveHandler);
    $("#NavButtonDeleteA").on("click", deleteHandler);
    //TBD: $("#NavButtonCancelA").on("click", cancelHandler);
});

//
//For the tinymce links button to populate modal
//

getNonAbstractEntitiesByDomain = function(callback) {
    var cmdList = {
        commandList: [
            {
                domain: "{{js:this.getDomain().name;/}}",
                targetType: $active.entity.type,
                command: "SearchForTargetEntity",
                filter: $active.relationship.filter
            }
        ]
    };
    reqData = JSON.stringify(cmdList, null, 2);

    $.ajax({
        url: $active._links.crud.href,
        type: 'POST',
        data: reqData,
        contentType: 'application/json; charset=utf-8',
        dataType: "json",
        success: function (result) {
            if (result.success) {
                $active.relationship.queryResults = [];
                $active.relationship.queryResultsCount = result.resultList[0].queryResultsCount;
                result.resultList[0].queryResult.forEach (function (queryResult) {
                    var source = get{{js:this.getDomain().name;/}}Admin().findOrAddToEntityCache(queryResult["_id"], queryResult.type, queryResult);
                    $active.relationship.queryResults.push(source);
                });
                callback();
                return result;
            }
            console.log("Failed to post CRUD commands: " + result.error);
        },
        error: function () {
            console.log("Error while posting CRUD commands!");
        }
    });
}

//
// {{js:this.name;/}}Admin Interface
//

// TBD: use global variable with shorter name...

var _{{js:this.name;/}}Admin = null;

get{{js:this.name;/}}Admin = function  () {
    if (!_{{js:this.name;/}}Admin)
        _{{js:this.name;/}}Admin = new {{js:this.name;/}}Admin ();
    return _{{js:this.name;/}}Admin;
}

function {{js:this.name;/}}Admin() {
    this._rootInstance = null;
    this._entityCache = {};
}

{{js:this.name;/}}Admin.prototype.getRootInstance = function (domain, handleResult) {
    if (this._rootInstance) {
        handleResult(this._rootInstance);
        return;
    }
    console.log("Getting root entity for "+domain);
    var reqData = {
        commandList: [
            {
                command: "GetRootInstance",
                domain: domain,
                targetType: domain
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            if (!result.resultList || result.resultList.length!=1) {
                alert("Could not find RootInstance - potential Server error");
                return;
            }
            if (result.resultList[0].error) {
                alert(result.resultList[0].status);
                return;
            }
            var rootInstanceFromServer = result.resultList[0].rootInstance;
            console.log("RootInstanceID: " + rootInstanceFromServer._id);
            var newRootInstance = new {{js:this.name;/}}("{{js:this.name;/}}", null, rootInstanceFromServer._id, false);
            newRootInstance._links = rootInstanceFromServer._links;
            get{{js:this.name;/}}Admin()._rootInstance = newRootInstance;
            handleResult (newRootInstance);
        }
        else {
            alert(result.err);
        }
    });
}

{{js:this.name;/}}Admin.prototype.getEntityByID = function (domain, targetType, entityID, handleResult) {
    var target = this._entityCache[entityID];
    if (target) {
        handleResult(target);
        return;
    }
    console.log("Getting entity by ID from domain "+domain);
    var reqData = {
        commandList: [
            {
                command: "FindByID",
                domain: domain,
                targetType: targetType,
                targetID: entityID
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            if (!result.resultList || result.resultList.length!=1) {
                alert("Could not find entity!");
                handleResult (null);
                return;
            }
            if (result.resultList[0].error) {
                alert(result.resultList[0].status);
                handleResult (null);
                return;
            }
            var result = result.resultList[0];
            var entityFromServer = result.matchingEntity;
            var newEntity = get{{js:this.name;/}}Admin().findOrAddToEntityCache (entityID, entityFromServer.type);
            newEntity.updatePropertiesWithQueryResults(entityFromServer);
            newEntity.breadcrumb = result.breadcrumb;
            handleResult (newEntity);
        }
        else {
            alert(result.err);
        }
    });
}

{{js:this.name;/}}Admin.prototype.getEntitiesByType = function (domain, targetType, handleResult) {
    console.log("Getting entities by Type from domain "+domain);
    var reqData = {
        commandList: [
            {
                command: "FindByType",
                domain: domain,
                targetType: targetType
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            if (!result.resultList) {
                alert("Could not find entities!");
                handleResult (null);
                return;
            }
            if (result.resultList[0].error) {
                alert(result.resultList[0].status);
                handleResult (null);
                return;
            }
            var resList = [];
            for (var i in result.resultList[0].queryResult) {
                var res = result.resultList[0].result[i];
                var newEntity = get{{js:this.name;/}}Admin().findOrAddToEntityCache (res._id, res.type);
                newEntity.updatePropertiesWithQueryResults(res);
                resList.push(newEntity);
            }
            handleResult (resList);
        }
        else {
            alert(result.err);
        }
    });
}

{{Entity*}}
{{js:this.getParent_Domain().name;/}}Admin.prototype.addNew_{{js:this.name;/}} = function(parentID, relnID, relnName, parentBaseClassID, parentBaseClassName) {
    var new_{{js:this.name;/}} = new {{js:this.name;/}} ("{{js:this.name;/}}", null, null, false);
    new_{{js:this.name;/}}.parentID = parentID;
    new_{{js:this.name;/}}.parentRelnName = relnName;
    new_{{js:this.name;/}}.parentRelnID = relnID;
    new_{{js:this.name;/}}.parentBaseClassID = parentBaseClassID;
    new_{{js:this.name;/}}.parentBaseClassName = parentBaseClassName;
    new_{{js:this.name;/}}.isNew = true;
    return new_{{js:this.name;/}};
}
{{/Entity}}


{{js:this.name;/}}Admin.prototype.save = function (domain) {
    this.saveNewEntity(domain);
    this.saveChangedEntities(domain);
}

{{js:this.name;/}}Admin.prototype.delete = function (domain) {
    console.log("Deleting Entity: "+$active.entity.type+":"+$active.entity.id);
    if ($active.entity === null) return;
    if ($active.entity.isRootInstance) {
        alert ("Cannot delete Root Instance!");
        return;
    }
    var reqData = {
        commandList: [
            {
                command: "Delete",
                domain: domain,
                targetType: $active.entity.type,
                targetID: $active.entity.id
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            console.log("Delete: OK!");
            var parent = $active.entity.breadcrumb[$active.entity.breadcrumb.length-2];
            var type = parent.type;
            var oid = parent._id;
            window.location.href = "./../app/"+type+"?oid="+oid;
        }
        else {
            alert(result.err);
        }
    });
}


{{js:this.name;/}}Admin.prototype.saveNewEntity = function (domain) {
    if ($active.entity === null || !$active.entity.isNew) return;
    var newEntity = $active.entity.propertiesOnly();
    var reqData = {
        commandList: [
            {
                command: "Create",
                domain: domain,
                targetType: $active.entity.type,
                entity: newEntity
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            console.log("Create: OK!");
            var e=result.newEntity;
            $active.entity.id=e.newID;
            $active.entity.isNew=false;
            $active.mode="edit";
            window.location.href = "./../app/"+e.type+"?oid="+e._id;
        }
        else {
            alert(result.err);
        }
    });
}

{{js:this.name;/}}Admin.prototype.saveChangedEntities = function (domain) {
    var changedEntities = this.getChangedEntities();
    if (!changedEntities || changedEntities.length===0) return;

    var entitiesWithPropertiesOnly = [];
    for (var i in changedEntities) {
        entitiesWithPropertiesOnly.push(changedEntities[i].propertiesOnly());
        changedEntities[i].changed = false;
    }

    var reqData = {
        commandList: [
            {
                command: "Update",
                domain: domain,
                targetType: entitiesWithPropertiesOnly[0].type, // TBD: DIRTY HACK - must be changed on the server side to work with multiple entities!
                entities: entitiesWithPropertiesOnly
            }
        ]
    };
    this.processCRUDcommands(reqData, function (result) {
        if (result.success) {
            console.log("Save: OK!");
        }
        else {
            alert(result.err);
        }
    });
}

{{js:this.name;/}}Admin.prototype.processCRUDcommands = function (commandList, handleResult) {
    //Create JSON Data
    var reqData = JSON.stringify(commandList, null, 2)

    // Post to server
    $.ajax({
        url: $active._links.crud.href,
        type: 'POST',
        data: reqData,
        contentType: 'application/json; charset=utf-8',
        dataType: "json",
        success: function (result) {
            if (result.success) {
                handleResult (result);
            }
            else {
                console.log("Failed to post CRUD commands: " + result.error);
            }
        },
        error: function () {
            console.log("Error while posting CRUD commands!");
        }
    });
}

{{js:this.name;/}}Admin.prototype.getChangedEntities = function () {
    var result = [];
    for (var i in this._entityCache) {
        if (this._entityCache[i].changed) result.push(this._entityCache[i]);
    }
    return result;
}

{{js:this.name;/}}Admin.prototype.findOrAddToEntityCache = function (entityID, entityType, queryResult) {
    var target = this._entityCache[entityID];
    if (target) return target;
    var newEntity=null;
    switch (entityType) {{{Entity*}}
        case "{{js:this.name;/}}": newEntity = new {{js:this.name;/}} ("{{js:this.name;/}}", null, entityID, true); break;{{/Entity}}
        default: throw "Unknown Entity Type: "+entityType;
    }
    if (queryResult) newEntity.updatePropertiesWithQueryResults(queryResult);
    return newEntity;
}

{{js:this.name;/}}Admin.prototype.updateEntityCacheWithQueryResults = function (queryResults) {
    if (!queryResults || queryResults.error) throw "Error updating entity cache!"
    queryResults.resultList.forEach (function (queryResult) {
        switch (queryResult.queryType) {
            case "RootInstance":
                get{{js:this.name;/}}Admin()._rootInstance = new {{js:this.name;/}} ("{{js:this.name;/}}", null, null);
                break;
            case "AggregationQuery":
                var parent = get{{js:this.getDomain().name;/}}Admin().findOrAddToEntityCache(queryResult.parentID, queryResult.parentType);
                parent.updateRelationshipWithQueryResults (queryResult);
                break;
            case "FindAssocTargetOptions":
                var source = get{{js:this.getDomain().name;/}}Admin().findOrAddToEntityCache(queryResult.sourceID, queryResult.sourceType);
                source.updateRelationshipWithQueryResults (queryResult);
                break;
            default:
                console.log("Unknown query type: "+queryResult.queryType);
        }
    });
}

//
// Class "Relationship"
//

function Relationship(id, name, parent) {
    this.name = name;
    this.id = id;
    this.parent = parent;
    this.currentPage = 0;
    this.entitiesPerPage = 10;
    this.maxNumberOfPages = 5;
    this.filter = null;

    this.queryResults = [];
    this.queryResultsCount = -1;

    this.assocTargets = [];
}

Relationship.prototype.setFilter = function (f) {
    this.filter = f;
    this.currentPage=0;
}

Relationship.prototype.removeFromAssocTargets = function (id) {
    var newSelections = [];
    for (var i in this.assocTargets) {
        if (this.assocTargets[i].id !== id)
            newSelections.push(this.assocTargets[i]);
    }
    this.assocTargets = newSelections;
}

//
// Class "Base"
//

function Base(type, parent, id, isEmptyShell) {
    this.type = type;
    this.parent = parent;
    this.id = id;
    this.isEmptyShell = isEmptyShell;
    this.isNew = false;
    this.properties_NameOnly = false;
    this.properties_Valid = false;
    this.changed = false;

    if (id)
        get{{js:this.name;/}}Admin()._entityCache[id] = this;
    else {
        if ($active.entity)
            console.log("Warning: $active.entity already exists!");
        $active.entity = this;
    }
}

Base.prototype.compareToMyID = function (id) {
  return ""+this.id === ""+id;
}

{{Entity*}}//
// Class "{{js:this.name;/}}"
//

// Constructor
function {{js:this.name;/}}(type, parent, id, isEmptyShell) {
    // Initialize base class
    {{if}}this.hasParentClass(){{then}}{{js:this.getParentClass().name/}}.call(this, type, parent, id, isEmptyShell);{{else}}Base.call(this, type, parent, id, isEmptyShell);{{/if}}

{{BasicProperty?}}
    // Properties:{{BasicProperty*}}
    this.{{js:this.name;/}}={{js:this.defaultValue;/}};{{/BasicProperty}}{{/BasicProperty?}}
{{Enumeration?}}
    // Enumerations:{{Enumeration*}}
    this.{{js:this.name;/}}="";{{/Enumeration}}{{/Enumeration?}}
{{Relationship?}}
    // Relationships:{{Relationship*}}
    this.{{js:this.name;/}} = new Relationship({{js:this.id;/}}, "{{js:this.name;/}}", this);{{/Relationship}}{{/Relationship?}}
}

// Inheritance
{{js:this.name;/}}.prototype = Object.create({{if}}this.hasParentClass(){{then}}{{js:this.getParentClass().name/}}{{else}}Base{{/if}}.prototype);
{{js:this.name;/}}.prototype.constructor = {{js:this.name;/}};

{{Enumeration?}}// Definitions for Enumerations{{Enumeration*}}
{{js:this.getParent_Entity().name;/}}.prototype.enumDef_{{js:this.name;/}} = [{{Literal*}}{{js:this.itemIsFirst?'':', ';/}}"{{js:this.name;/}}"{{/Literal}}];
{{/Enumeration}}{{/Enumeration?}}
//
// Methods
//

{{js:this.name;/}}.prototype.getShorthand = function (qr) {
    var res = "undefined";
    {{js: (function () {
        var res='';
        var bps = this.getBasicProperties();
        for (var i in bps) {
            if (bps[i].propertyType === BasicTypes.String)
                return "res = this._"+bps[i].name+";";
        }
        return res;
        }).call(this);
    /}}
    return res;
}

{{js:this.name;/}}.prototype.updatePropertiesWithQueryResults = function (qr) {
    this.isEmptyShell = false;
    this._id = qr._id;
{{BasicProperty!*}}    this._{{js:this.name;/}} = qr.{{js:this.name;/}};
{{/BasicProperty!}}{{Association!*}}
    this.{{js:this.name;/}}.assocTargets = qr.{{js:this.name;/}} ? qr.{{js:this.name;/}} : [];{{/Association!}}
}

{{BasicProperty?}}{{BasicProperty*}}
{{js:this.getParent_Entity().name;/}}.prototype.get_{{js:this.name;/}} = function () { return this._{{js:this.name;/}} };
{{js:this.getParent_Entity().name;/}}.prototype.set_{{js:this.name;/}} = function (value) {
    if (this._{{js:this.name;/}}===value) return;
    this._{{js:this.name;/}}=value; this.changed=true; }; {{/BasicProperty}}{{/BasicProperty?}}

{{js:this.name;/}}.prototype.propertiesOnly = function () {
    var propertiesOnly = {};{{BasicProperty!?}}
    propertiesOnly._id = this.id;
    propertiesOnly.type = this.type;
    if (this.isNew) {
        propertiesOnly.parentID = this.parentID;
        propertiesOnly.parentRelnName = this.parentRelnName;
        propertiesOnly.parentRelnID = this.parentRelnID;
        propertiesOnly.parentBaseClassID = this.parentBaseClassID;
        propertiesOnly.parentBaseClassName = this.parentBaseClassName;
    }

{{BasicProperty!*}}    propertiesOnly.{{js:this.name;/}} = this.get_{{js:this.name;/}}();
{{/BasicProperty!}}{{/BasicProperty!?}}{{Association!*}}
    propertiesOnly.{{js:this.name;/}} = this.{{js:this.name;/}}.assocTargets;{{/Association!}}
    return propertiesOnly;
}

{{Relationship!?}}
{{js:this.name;/}}.prototype.updateRelationshipWithQueryResults = function (qr) {
    relnName = qr.parentRelnName ?
        qr.parentRelnName : // Aggregation
        qr.sourceRelnName;  // Association
    switch(relnName) {
        {{Relationship!*}}
        case "{{js:this.name;/}}":
            this.{{js:this.name;/}}.queryResultsCount=qr.queryResultsCount;
            for (var i in qr.queryResult) {
                target = get{{js:this.getParent_Entity().getParent_Domain().name;/}}Admin().findOrAddToEntityCache(qr.queryResult[i]._id, qr.queryResult[i].type, qr.queryResult[i]);
                this.{{js:this.name;/}}.queryResults.push(target);
            }
        break;
        {{/Relationship!}}
        default: throw "Invalid relationship name: "+relnName;
    }
}
{{/Relationship!?}}

{{Relationship?}}{{Relationship*}}
{{js:this.getParent_Entity().name;/}}.prototype.query_{{js:this.name;/}} = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        domain: "{{js:this.getDomain().name;/}}",
        command: {{if}}this.isAggregation{{then}}"AggregationQuery"{{else}}"AssociationQuery"{{/if}},
        parentRelnName: "{{js:this.name;/}}",
        parentRelnID: "{{js:this.id;/}}",
        targetType: "{{js:this.getTargetEntity().name;/}}",
        parentID: this.id,
        parentType: this.type,
        currentPage: this.{{js:this.name;/}}.currentPage,
        entitiesPerPage: this.{{js:this.name;/}}.entitiesPerPage
    });
    var me = this;
    get{{js:this.getDomain().name;/}}Admin().processCRUDcommands(reqData, function(res) {
        me.{{js:this.name;/}}.queryResults = [];
        get{{js:this.getDomain().name;/}}Admin().updateEntityCacheWithQueryResults (res);
        callback (me.{{js:this.name;/}}, me);
    });
}

{{js:this.getParent_Entity().name;/}}.prototype.getPotentialTargets4{{js:this.name;/}} = function (callback) {
    var reqData = { commandList: [] };
    reqData.commandList.push ({
        queryID: 1,
        domain: "{{js:this.getDomain().name;/}}",
        command: "FindAssocTargetOptions",
        sourceID: this.id,
        sourceType: this.type,
        targetType: "{{js:this.getTargetEntity().name;/}}",
        sourceRelnName: "{{js:this.name;/}}",
        sourceRelnID: "{{js:this.id;/}}",
        currentPage: this.{{js:this.name;/}}.currentPage,
        entitiesPerPage:this.{{js:this.name;/}}.entitiesPerPage,
        filter:this.{{js:this.name;/}}.filter
    });
    var me = this;
    get{{js:this.getDomain().name;/}}Admin().processCRUDcommands(reqData, function(res) {
        me.{{js:this.name;/}}.queryResults = [];
        me.{{js:this.name;/}}.queryResultsCount = res.resultList[0].queryResultsCount;
        get{{js:this.getDomain().name;/}}Admin().updateEntityCacheWithQueryResults (res);
        callback (me.{{js:this.name;/}});
    });
}
{{/Relationship}}{{/Relationship?}}

{{Aggregation?}}// Manage Aggregations:{{Aggregation*}}
{{js:this.getParent_Entity().name;/}}.prototype.get_{{js:this.name;/}} = function () {
    return this.{{js:this.name;/}}.queryResults;
}
{{/Aggregation}}{{/Aggregation?}}

{{Association?}}// Manage Associations:{{Association*}}
{{js:this.getParent_Entity().name;/}}.prototype.get_{{js:this.name;/}} = function () {
     return this.{{js:this.name;/}}.queryResults;
}
{{/Association}}{{/Association?}}

{{/Entity}}

{{Options}} {"saveAs": ["public/app", "this.name+'_WebAPI.js'"] } {{/Options}}{{/Domain}}
